
#################################################################
# Auto-generated by bootstrap-rktio-pycket.rkt using rktio.rktl #
# Modifying by hand is not recommended.                         #
#################################################################

"""

Loads the librktio static library using rffi and provides #%rktio module
in Pycket runtime.

Defines, registers, and exposes pycket wrappers for all the librktio
primitives in rktio.rktl.

Structs defined by define-struct-type are manually defined (see bootstrap_structs.py).
They can also be autometed, although it's a bit tricky,
I just happened to define them by hand when I started working on this.
Pycket(actually rffi) needs to know the field layout because we'll expose
some primitives that access those fields on the host (Pycket).

Uses opaque pointers for all the other structs that the rktio functions
reference.

See bootstrap-rktio-pycket.rkt for type mappings: rktio -> Pycket.
See types.py for type mappings between Pycket -> rffi.

At the bottom it adds all the exposed functions to the #%rktio module
in the select_prim_table, which is how Pycket loads the primitive tables.

"""


import os

from pycket import values, values_string
from pycket.prims.primitive_tables import select_prim_table, make_primitive_table
from pycket.prims.expose import expose
from pycket.rktio.types import *
from pycket.foreign import make_w_pointer_class

from rpython.rtyper.lltypesystem import rffi
from rpython.translator.tool.cbuild import ExternalCompilationInfo

num = values.W_Fixnum
sym = values.W_Symbol.make

# Load the librktio.a
# TODO: make this absolute (pycket/rktio), instead of "this file"
RKTIO_DIR = os.path.dirname(os.path.abspath(__file__))
librktio_a = ExternalCompilationInfo(
    includes=['rktio.h'],
    include_dirs=[RKTIO_DIR],
    libraries=['rktio'],
    library_dirs=[RKTIO_DIR],
)

R_PTR = rffi.COpaquePtr("_pointer")
W_R_PTR = make_w_pointer_class("_pointer")

rktio_str = []


# Constants 

RKTIO_LOCK_ERROR = -2
RKTIO_ERROR_CANNOT_FILE_POSITION = 12
RKTIO_ERROR_LTPS_NOT_FOUND = 17
RKTIO_LOG_WARNING = 3
RKTIO_SW_MINIMIZE = 2
RKTIO_FILE_TYPE_DIRECTORY_LINK = 4
RKTIO_FILE_TYPE_ERROR = -1
RKTIO_COPY_STEP_READ_SRC_DATA = 3
RKTIO_LTPS_REMOVE_VNODE = 8
RKTIO_OPEN_TRUNCATE = 1 << 3
RKTIO_LTPS_HANDLE_ZERO = 1
RKTIO_CONVERTER_SUPPORTED = 1 << 0
RKTIO_PATH_CACHE_DIR = 10
RKTIO_ERROR_INIT_FAILED = 16
RKTIO_OPEN_MUST_EXIST = 1 << 5
RKTIO_LOG_INFO = 4
RKTIO_FS_CHANGE_SCALABLE = 1 << 1
RKTIO_SHUTDOWN_READ = 0
RKTIO_SW_MAXIMIZE = 1
RKTIO_ERROR_CONVERT_OTHER = 31
RKTIO_ERROR_LTPS_REMOVED = 18
RKTIO_OPEN_DIR = 1 << 11
RKTIO_SW_SHOWNA = 9
RKTIO_ERROR_CONVERT_NOT_ENOUGH_SPACE = 28
RKTIO_PROCESS_RUNNING = 0
RKTIO_ERROR_UNSUPPORTED = 1
RKTIO_NUM_OS_SIGNALS = 3
RKTIO_PATH_TEMP_DIR = 1
RKTIO_OS_SIGNAL_NONE = -1
RKTIO_READ_ERROR = -2
RKTIO_ERROR_NO_TILDE = 13
RKTIO_ERROR_INVALID_PATH = 2
RKTIO_ERROR_TRY_AGAIN = 23
RKTIO_PROCESS_NO_CLOSE_FDS = 1 << 4
RKTIO_COPY_STEP_WRITE_DEST_METADATA = 6
RKTIO_PROCESS_ERROR = -2
RKTIO_ERROR_IS_A_DIRECTORY = 9
RKTIO_PROCESS_DONE = 1
RKTIO_ERROR_UNKNOWN_USER = 15
RKTIO_POLL_READ = 1 << 0
RKTIO_PROCESS_WINDOWS_CHAIN_TERMINATION = 1 << 3
RKTIO_OPEN_TEXT = 1 << 2
RKTIO_LTPS_HANDLE_NONE = 0
RKTIO_SW_RESTORE = 3
RKTIO_LTPS_CHECK_READ = 3
RKTIO_ERROR_KIND_GAI = 2
RKTIO_LTPS_REMOVE = 5
RKTIO_DEFAULT_DIRECTORY_PERM_BITS = 511
RKTIO_OS_SIGNAL_TERM = 1
RKTIO_SW_SHOWNOACTIVATE = 10
RKTIO_ERROR_KIND_WINDOWS = 1
RKTIO_POSITION_FROM_END = 1
RKTIO_FAMILY_ANY = -1
RKTIO_SW_SHOWMINIMIZED = 7
RKTIO_COPY_STEP_OPEN_SRC = 1
RKTIO_PROCESS_NEW_GROUP = 1 << 0
RKTIO_OPEN_UDP = 1 << 8
RKTIO_ERROR_DOES_NOT_EXIST = 3
RKTIO_SW_SHOWMAXIMIZED = 6
RKTIO_PERMISSION_WRITE = 2
RKTIO_ERROR_SHELL_EXECUTE_FAILED = 27
RKTIO_PERMISSION_READ = 4
RKTIO_PROP_ERROR = -2
RKTIO_LTPS_CHECK_VNODE = 7
RKTIO_OPEN_REGFILE = 1 << 9
RKTIO_PATH_SYS_DIR = 0
RKTIO_PERMISSION_ERROR = -1
RKTIO_ADD_MEMBERSHIP = 0
RKTIO_LOCK_NOT_ACQUIRED = 0
RKTIO_PATH_ADDON_DIR = 4
RKTIO_PATH_INIT_FILE = 9
RKTIO_PROCESS_STDOUT_AS_STDERR = 1 << 1
RKTIO_DROP_MEMBERSHIP = 1
RKTIO_CONVERT_RECASE_UTF16 = 1 << 2
RKTIO_ERROR_KIND_POSIX = 0
RKTIO_ERROR_UNSUPPORTED_TEXT_MODE = 11
RKTIO_ERROR_NO_SUCH_ENVVAR = 26
RKTIO_ERROR_TIME_OUT_OF_RANGE = 25
RKTIO_OPEN_NOT_DIR = 1 << 12
RKTIO_ERROR_CONNECT_TRYING_NEXT = 19
RKTIO_PATH_HOME_DIR = 5
RKTIO_DEFAULT_PERM_BITS = 438
RKTIO_OS_SIGNAL_HUP = 2
RKTIO_SHA224_DIGEST_SIZE = 28
RKTIO_OS_SIGNAL_INT = 0
RKTIO_PATH_PREF_DIR = 2
RKTIO_ERROR_CONVERT_PREMATURE_END = 30
RKTIO_LTPS_CREATE_READ = 1
RKTIO_ERROR_KIND_RACKET = 3
RKTIO_FILE_TYPE_LINK = 3
RKTIO_COPY_STEP_OPEN_DEST = 2
RKTIO_OPEN_OWN = 1 << 14
RKTIO_STDERR = 2
RKTIO_COPY_STEP_UNKNOWN = 0
RKTIO_ERROR_ACCEPT_NOT_READY = 20
RKTIO_SW_SHOWMINNOACTIVE = 8
RKTIO_COPY_STEP_WRITE_DEST_DATA = 4
RKTIO_PATH_DOC_DIR = 7
RKTIO_POLL_READY = 1
RKTIO_SW_HIDE = 0
RKTIO_SHA256_DIGEST_SIZE = 32
RKTIO_OPEN_APPEND = 1 << 4
RKTIO_ERROR_TRY_AGAIN_WITH_IPV4 = 24
RKTIO_ERROR_INFO_TRY_AGAIN = 22
RKTIO_LTPS_CREATE_VNODE = 6
RKTIO_OPEN_REPLACE_PERMS = 1 << 15
RKTIO_OPEN_CAN_EXIST = 1 << 6
RKTIO_ERROR_BAD_PERMISSION = 8
RKTIO_POLL_WRITE = 1 << 1
RKTIO_OPEN_READ = 1 << 0
RKTIO_SW_SHOWDEFAULT = 5
RKTIO_WRITE_ERROR = -2
RKTIO_LOCK_ACQUIRED = 1
RKTIO_POLL_NOT_READY = 0
RKTIO_ERROR_HOST_AND_PORT_BOTH_UNSPECIFIED = 21
RKTIO_FILE_TYPE_FILE = 1
RKTIO_PATH_INIT_DIR = 8
RKTIO_OPEN_INIT = 1 << 13
RKTIO_NO_INHERIT_INPUT = 1 << 0
RKTIO_LOG_FATAL = 1
RKTIO_COPY_STEP_READ_SRC_METADATA = 5
RKTIO_CONVERT_ERROR = -1
RKTIO_PROCESS_NO_INHERIT_FDS = 1 << 5
RKTIO_LOG_DEBUG = 5
RKTIO_ERROR_DLL = 32
RKTIO_OPEN_WRITE = 1 << 1
RKTIO_READ_EOF = -1
RKTIO_PERMISSION_EXEC = 1
RKTIO_PATH_DESK_DIR = 6
RKTIO_FS_CHANGE_LOW_LATENCY = 1 << 2
RKTIO_OPEN_NOT_REGFILE = 1 << 10
RKTIO_PROCESS_WINDOWS_EXACT_CMDLINE = 1 << 2
RKTIO_SW_SHOW = 4
RKTIO_ERROR_NOT_A_LINK = 7
RKTIO_ERROR_EXISTS = 4
RKTIO_LOG_ERROR = 2
RKTIO_POSITION_FROM_START = 0
RKTIO_ERROR_LINK_FAILED = 6
RKTIO_SW_SHOWNORMAL = 11
RKTIO_LTPS_CREATE_WRITE = 2
RKTIO_NO_INHERIT_OUTPUT = 1 << 1
RKTIO_FS_CHANGE_FILE_LEVEL = 1 << 3
RKTIO_FS_CHANGE_NEED_LTPS = 1 << 4
RKTIO_ERROR_NOT_A_DIRECTORY = 10
RKTIO_SHA1_DIGEST_SIZE = 20
RKTIO_STDOUT = 1
RKTIO_FILE_TYPE_DIRECTORY = 2
RKTIO_ERROR_ACCESS_DENIED = 5
RKTIO_POLL_FLUSH = 1 << 1 << 2
RKTIO_STDIN = 0
RKTIO_ERROR_CONVERT_BAD_SEQUENCE = 29
RKTIO_OPEN_SOCKET = 1 << 7
RKTIO_POLL_ERROR = -2
RKTIO_LTPS_CHECK_WRITE = 4
RKTIO_PATH_PREF_FILE = 3
RKTIO_FS_CHANGE_SUPPORTED = 1 << 0
RKTIO_CONVERT_STRCOLL_UTF16 = 1 << 1
RKTIO_LTPS_HANDLE_FREE = 2
RKTIO_ERROR_ILL_FORMED_USER = 14
RKTIO_SHUTDOWN_WRITE = 1


# Struct pointers

DLL_OPEN_PROC_PTR = rffi.COpaquePtr("dll_open_proc")
W_DLL_OPEN_PROC_PTR = make_w_pointer_class("dll_open_proc")

RKTIO_FS_CHANGE_T_PTR = rffi.COpaquePtr("rktio_fs_change_t")
W_RKTIO_FS_CHANGE_T_PTR = make_w_pointer_class("rktio_fs_change_t")

RKTIO_SHA1_CTX_T_PTR = rffi.COpaquePtr("rktio_sha1_ctx_t")
W_RKTIO_SHA1_CTX_T_PTR = make_w_pointer_class("rktio_sha1_ctx_t")

RKTIO_STAT_T_PTR = rffi.COpaquePtr("rktio_stat_t")
W_RKTIO_STAT_T_PTR = make_w_pointer_class("rktio_stat_t")

RKTIO_ADDRINFO_LOOKUP_T_PTR = rffi.COpaquePtr("rktio_addrinfo_lookup_t")
W_RKTIO_ADDRINFO_LOOKUP_T_PTR = make_w_pointer_class("rktio_addrinfo_lookup_t")

RKTIO_ENVVARS_T_PTR = rffi.COpaquePtr("rktio_envvars_t")
W_RKTIO_ENVVARS_T_PTR = make_w_pointer_class("rktio_envvars_t")

RKTIO_LENGTH_AND_ADDRINFO_T_PTR = rffi.COpaquePtr("rktio_length_and_addrinfo_t")
W_RKTIO_LENGTH_AND_ADDRINFO_T_PTR = make_w_pointer_class("rktio_length_and_addrinfo_t")

RKTIO_FD_T_PTR = rffi.COpaquePtr("rktio_fd_t")
W_RKTIO_FD_T_PTR = make_w_pointer_class("rktio_fd_t")

RKTIO_FILE_COPY_T_PTR = rffi.COpaquePtr("rktio_file_copy_t")
W_RKTIO_FILE_COPY_T_PTR = make_w_pointer_class("rktio_file_copy_t")

RKTIO_SIGNAL_HANDLE_T_PTR = rffi.COpaquePtr("rktio_signal_handle_t")
W_RKTIO_SIGNAL_HANDLE_T_PTR = make_w_pointer_class("rktio_signal_handle_t")

RKTIO_CONNECT_T_PTR = rffi.COpaquePtr("rktio_connect_t")
W_RKTIO_CONNECT_T_PTR = make_w_pointer_class("rktio_connect_t")

RKTIO_LTPS_HANDLE_T_PTR = rffi.COpaquePtr("rktio_ltps_handle_t")
W_RKTIO_LTPS_HANDLE_T_PTR = make_w_pointer_class("rktio_ltps_handle_t")

RKTIO_DLL_T_PTR = rffi.COpaquePtr("rktio_dll_t")
W_RKTIO_DLL_T_PTR = make_w_pointer_class("rktio_dll_t")

RKTIO_DATE_T_PTR = rffi.COpaquePtr("rktio_date_t")
W_RKTIO_DATE_T_PTR = make_w_pointer_class("rktio_date_t")

RKTIO_PROCESS_T_PTR = rffi.COpaquePtr("rktio_process_t")
W_RKTIO_PROCESS_T_PTR = make_w_pointer_class("rktio_process_t")

RKTIO_LTPS_T_PTR = rffi.COpaquePtr("rktio_ltps_t")
W_RKTIO_LTPS_T_PTR = make_w_pointer_class("rktio_ltps_t")

RKTIO_SHA2_CTX_T_PTR = rffi.COpaquePtr("rktio_sha2_ctx_t")
W_RKTIO_SHA2_CTX_T_PTR = make_w_pointer_class("rktio_sha2_ctx_t")

RKTIO_T_PTR = rffi.COpaquePtr("rktio_t")
W_RKTIO_T_PTR = make_w_pointer_class("rktio_t")

RKTIO_IDENTITY_T_PTR = rffi.COpaquePtr("rktio_identity_t")
W_RKTIO_IDENTITY_T_PTR = make_w_pointer_class("rktio_identity_t")

RKTIO_POLL_SET_T_PTR = rffi.COpaquePtr("rktio_poll_set_t")
W_RKTIO_POLL_SET_T_PTR = make_w_pointer_class("rktio_poll_set_t")

RKTIO_CONVERTER_T_PTR = rffi.COpaquePtr("rktio_converter_t")
W_RKTIO_CONVERTER_T_PTR = make_w_pointer_class("rktio_converter_t")

RKTIO_CONVERT_RESULT_T_PTR = rffi.COpaquePtr("rktio_convert_result_t")
W_RKTIO_CONVERT_RESULT_T_PTR = make_w_pointer_class("rktio_convert_result_t")

RKTIO_FD_TRANSFER_T_PTR = rffi.COpaquePtr("rktio_fd_transfer_t")
W_RKTIO_FD_TRANSFER_T_PTR = make_w_pointer_class("rktio_fd_transfer_t")

RKTIO_STATUS_T_PTR = rffi.COpaquePtr("rktio_status_t")
W_RKTIO_STATUS_T_PTR = make_w_pointer_class("rktio_status_t")

DLL_CLOSE_PROC_PTR = rffi.COpaquePtr("dll_close_proc")
W_DLL_CLOSE_PROC_PTR = make_w_pointer_class("dll_close_proc")

RKTIO_LISTENER_T_PTR = rffi.COpaquePtr("rktio_listener_t")
W_RKTIO_LISTENER_T_PTR = make_w_pointer_class("rktio_listener_t")

RKTIO_ADDRINFO_T_PTR = rffi.COpaquePtr("rktio_addrinfo_t")
W_RKTIO_ADDRINFO_T_PTR = make_w_pointer_class("rktio_addrinfo_t")

RKTIO_PROCESS_RESULT_T_PTR = rffi.COpaquePtr("rktio_process_result_t")
W_RKTIO_PROCESS_RESULT_T_PTR = make_w_pointer_class("rktio_process_result_t")

DLL_FIND_OBJECT_PROC_PTR = rffi.COpaquePtr("dll_find_object_proc")
W_DLL_FIND_OBJECT_PROC_PTR = make_w_pointer_class("dll_find_object_proc")

RKTIO_DIRECTORY_LIST_T_PTR = rffi.COpaquePtr("rktio_directory_list_t")
W_RKTIO_DIRECTORY_LIST_T_PTR = make_w_pointer_class("rktio_directory_list_t")


c_rktio_get_error_string = rffi.llexternal('rktio_get_error_string', [R_PTR, INT, INT], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_get_error_string")

@expose("rktio_get_error_string", [W_R_PTR, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_get_error_string(w_rktio, w_kind, w_errid):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_kind = rffi.cast(rffi.INT, w_kind.value)

	r_errid = rffi.cast(rffi.INT, w_errid.value)

	res = c_rktio_get_error_string(r_rktio, r_kind, r_errid)

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_get_last_error_string = rffi.llexternal('rktio_get_last_error_string', [R_PTR], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_get_last_error_string")

@expose("rktio_get_last_error_string", [W_R_PTR], simple=True)
def rktio_get_last_error_string(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_last_error_string(r_rktio)

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_remap_last_error = rffi.llexternal('rktio_remap_last_error', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_remap_last_error")

@expose("rktio_remap_last_error", [W_R_PTR], simple=True)
def rktio_remap_last_error(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_remap_last_error(r_rktio)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_set_last_error_step = rffi.llexternal('rktio_set_last_error_step', [R_PTR, INT], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_set_last_error_step")

@expose("rktio_set_last_error_step", [W_R_PTR, values.W_Fixnum], simple=True)
def rktio_set_last_error_step(w_rktio, w_step):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_step = rffi.cast(rffi.INT, w_step.value)

	res = c_rktio_set_last_error_step(r_rktio, r_step)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_set_last_error = rffi.llexternal('rktio_set_last_error', [R_PTR, INT, INT], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_set_last_error")

@expose("rktio_set_last_error", [W_R_PTR, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_set_last_error(w_rktio, w_kind, w_errid):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_kind = rffi.cast(rffi.INT, w_kind.value)

	r_errid = rffi.cast(rffi.INT, w_errid.value)

	res = c_rktio_set_last_error(r_rktio, r_kind, r_errid)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_get_last_error_step = rffi.llexternal('rktio_get_last_error_step', [R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_get_last_error_step")

@expose("rktio_get_last_error_step", [W_R_PTR], simple=True)
def rktio_get_last_error_step(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_last_error_step(r_rktio)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_get_last_error = rffi.llexternal('rktio_get_last_error', [R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_get_last_error")

@expose("rktio_get_last_error", [W_R_PTR], simple=True)
def rktio_get_last_error(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_last_error(r_rktio)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_get_last_error_kind = rffi.llexternal('rktio_get_last_error_kind', [R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_get_last_error_kind")

@expose("rktio_get_last_error_kind", [W_R_PTR], simple=True)
def rktio_get_last_error_kind(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_last_error_kind(r_rktio)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_set_dll_procs = rffi.llexternal('rktio_set_dll_procs', [R_PTR, R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_set_dll_procs")

@expose("rktio_set_dll_procs", [W_R_PTR, W_R_PTR, W_R_PTR], simple=True)
def rktio_set_dll_procs(w_dll_open, w_dll_find_object, w_dll_close):

	r_dll_open = rffi.cast(R_PTR, w_dll_open.to_rffi())

	r_dll_find_object = rffi.cast(R_PTR, w_dll_find_object.to_rffi())

	r_dll_close = rffi.cast(R_PTR, w_dll_close.to_rffi())

	res = c_rktio_set_dll_procs(r_dll_open, r_dll_find_object, r_dll_close)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_sha2_final = rffi.llexternal('rktio_sha2_final', [R_PTR, UNSIGNED_8], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_sha2_final")

@expose("rktio_sha2_final", [W_R_PTR, values.W_Fixnum], simple=True)
def rktio_sha2_final(w_ctx, w_digest):

	r_ctx = rffi.cast(R_PTR, w_ctx.to_rffi())

	r_digest = rffi.cast(rffi.UINT, w_digest.value)

	res = c_rktio_sha2_final(r_ctx, r_digest)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_sha2_update = rffi.llexternal('rktio_sha2_update', [R_PTR, UNSIGNED_8, INTPTR_T, INTPTR_T], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_sha2_update")

@expose("rktio_sha2_update", [W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_sha2_update(w_ctx, w_data, w_start, w_end):

	r_ctx = rffi.cast(R_PTR, w_ctx.to_rffi())

	r_data = rffi.cast(rffi.UINT, w_data.value)

	r_start = rffi.cast(rffi.SSIZE_T, w_start.value)

	r_end = rffi.cast(rffi.SSIZE_T, w_end.value)

	res = c_rktio_sha2_update(r_ctx, r_data, r_start, r_end)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_sha2_init = rffi.llexternal('rktio_sha2_init', [R_PTR, RKTIO_BOOL_T], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_sha2_init")

@expose("rktio_sha2_init", [W_R_PTR, values.W_Fixnum], simple=True)
def rktio_sha2_init(w_ctx, w_is224):

	r_ctx = rffi.cast(R_PTR, w_ctx.to_rffi())

	r_is224 = rffi.cast(rffi.INT, 1 if w_is224 is values.w_true else 0)

	res = c_rktio_sha2_init(r_ctx, r_is224)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_sha1_final = rffi.llexternal('rktio_sha1_final', [R_PTR, UNSIGNED_8], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_sha1_final")

@expose("rktio_sha1_final", [W_R_PTR, values.W_Fixnum], simple=True)
def rktio_sha1_final(w_context, w_digest):

	r_context = rffi.cast(R_PTR, w_context.to_rffi())

	r_digest = rffi.cast(rffi.UINT, w_digest.value)

	res = c_rktio_sha1_final(r_context, r_digest)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_sha1_update = rffi.llexternal('rktio_sha1_update', [R_PTR, UNSIGNED_8, INTPTR_T, INTPTR_T], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_sha1_update")

@expose("rktio_sha1_update", [W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_sha1_update(w_context, w_data, w_start, w_end):

	r_context = rffi.cast(R_PTR, w_context.to_rffi())

	r_data = rffi.cast(rffi.UINT, w_data.value)

	r_start = rffi.cast(rffi.SSIZE_T, w_start.value)

	r_end = rffi.cast(rffi.SSIZE_T, w_end.value)

	res = c_rktio_sha1_update(r_context, r_data, r_start, r_end)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_sha1_init = rffi.llexternal('rktio_sha1_init', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_sha1_init")

@expose("rktio_sha1_init", [W_R_PTR], simple=True)
def rktio_sha1_init(w_context):

	r_context = rffi.cast(R_PTR, w_context.to_rffi())

	res = c_rktio_sha1_init(r_context)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_pop_c_numeric_locale = rffi.llexternal('rktio_pop_c_numeric_locale', [R_PTR, VOID], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_pop_c_numeric_locale")

@expose("rktio_pop_c_numeric_locale", [W_R_PTR, values.W_Fixnum], simple=True)
def rktio_pop_c_numeric_locale(w_rktio, w_prev):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_prev = rffi.cast(rffi.VOIDP, w_prev.value)

	res = c_rktio_pop_c_numeric_locale(r_rktio, r_prev)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_push_c_numeric_locale = rffi.llexternal('rktio_push_c_numeric_locale', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_push_c_numeric_locale")

@expose("rktio_push_c_numeric_locale", [W_R_PTR], simple=True)
def rktio_push_c_numeric_locale(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_push_c_numeric_locale(r_rktio)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_set_default_locale = rffi.llexternal('rktio_set_default_locale', [RKTIO_CONST_STRING_T], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_set_default_locale")

@expose("rktio_set_default_locale", [values_string.W_String], simple=True)
def rktio_set_default_locale(w_name):

	_p_str = w_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_name = rffi.str2charp(p_str)

	res = c_rktio_set_default_locale(r_name)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_set_locale = rffi.llexternal('rktio_set_locale', [R_PTR, RKTIO_CONST_STRING_T], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_set_locale")

@expose("rktio_set_locale", [W_R_PTR, values_string.W_String], simple=True)
def rktio_set_locale(w_rktio, w_name):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_name = rffi.str2charp(p_str)

	res = c_rktio_set_locale(r_rktio, r_name)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_strcoll_utf16 = rffi.llexternal('rktio_strcoll_utf16', [R_PTR, RKTIO_CHAR16_T, INTPTR_T, RKTIO_CHAR16_T, INTPTR_T, RKTIO_BOOL_T], INT, compilation_info=librktio_a)

rktio_str.append("rktio_strcoll_utf16")

@expose("rktio_strcoll_utf16", [W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_strcoll_utf16(w_rktio, w_s1, w_l1, w_s2, w_l2, w_cvt_case):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_s1 = rffi.cast(rffi.INT, w_s1.value)

	r_l1 = rffi.cast(rffi.SSIZE_T, w_l1.value)

	r_s2 = rffi.cast(rffi.INT, w_s2.value)

	r_l2 = rffi.cast(rffi.SSIZE_T, w_l2.value)

	r_cvt_case = rffi.cast(rffi.INT, 1 if w_cvt_case is values.w_true else 0)

	res = c_rktio_strcoll_utf16(r_rktio, r_s1, r_l1, r_s2, r_l2, r_cvt_case)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_locale_strcoll = rffi.llexternal('rktio_locale_strcoll', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T], INT, compilation_info=librktio_a)

rktio_str.append("rktio_locale_strcoll")

@expose("rktio_locale_strcoll", [W_R_PTR, values_string.W_String, values_string.W_String], simple=True)
def rktio_locale_strcoll(w_rktio, w_s1, w_s2):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_s1.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_s1 = rffi.str2charp(p_str)

	_p_str = w_s2.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_s2 = rffi.str2charp(p_str)

	res = c_rktio_locale_strcoll(r_rktio, r_s1, r_s2)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_recase_utf16 = rffi.llexternal('rktio_recase_utf16', [R_PTR, RKTIO_BOOL_T, RKTIO_CHAR16_T, INTPTR_T, INTPTR_T], RKTIO_CHAR16_T, compilation_info=librktio_a)

rktio_str.append("rktio_recase_utf16")

@expose("rktio_recase_utf16", [W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_recase_utf16(w_rktio, w_to_up, w_s1, w_len, w_olen):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_to_up = rffi.cast(rffi.INT, 1 if w_to_up is values.w_true else 0)

	r_s1 = rffi.cast(rffi.INT, w_s1.value)

	r_len = rffi.cast(rffi.SSIZE_T, w_len.value)

	r_olen = rffi.cast(rffi.SSIZE_T, w_olen.value)

	res = c_rktio_recase_utf16(r_rktio, r_to_up, r_s1, r_len, r_olen)

	# returns RKTIO_CHAR16_T
	return values.W_Fixnum(res)


c_rktio_locale_recase = rffi.llexternal('rktio_locale_recase', [R_PTR, RKTIO_BOOL_T, RKTIO_CONST_STRING_T], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_locale_recase")

@expose("rktio_locale_recase", [W_R_PTR, values.W_Fixnum, values_string.W_String], simple=True)
def rktio_locale_recase(w_rktio, w_to_up, w_in):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_to_up = rffi.cast(rffi.INT, 1 if w_to_up is values.w_true else 0)

	_p_str = w_in.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_in = rffi.str2charp(p_str)

	res = c_rktio_locale_recase(r_rktio, r_to_up, r_in)

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_convert_reset = rffi.llexternal('rktio_convert_reset', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_convert_reset")

@expose("rktio_convert_reset", [W_R_PTR, W_R_PTR], simple=True)
def rktio_convert_reset(w_rktio, w_cvt):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_cvt = rffi.cast(R_PTR, w_cvt.to_rffi())

	res = c_rktio_convert_reset(r_rktio, r_cvt)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_converter_close = rffi.llexternal('rktio_converter_close', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_converter_close")

@expose("rktio_converter_close", [W_R_PTR, W_R_PTR], simple=True)
def rktio_converter_close(w_rktio, w_cvt):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_cvt = rffi.cast(R_PTR, w_cvt.to_rffi())

	res = c_rktio_converter_close(r_rktio, r_cvt)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_convert_properties = rffi.llexternal('rktio_convert_properties', [R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_convert_properties")

@expose("rktio_convert_properties", [W_R_PTR], simple=True)
def rktio_convert_properties(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_convert_properties(r_rktio)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_processor_count = rffi.llexternal('rktio_processor_count', [R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_processor_count")

@expose("rktio_processor_count", [W_R_PTR], simple=True)
def rktio_processor_count(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_processor_count(r_rktio)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_wide_path_to_path = rffi.llexternal('rktio_wide_path_to_path', [R_PTR, RKTIO_CHAR16_T], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_wide_path_to_path")

@expose("rktio_wide_path_to_path", [W_R_PTR, values.W_Fixnum], simple=True)
def rktio_wide_path_to_path(w_rktio, w_wp):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_wp = rffi.cast(rffi.INT, w_wp.value)

	res = c_rktio_wide_path_to_path(r_rktio, r_wp)

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_get_seconds = rffi.llexternal('rktio_get_seconds', [R_PTR], RKTIO_TIMESTAMP_T, compilation_info=librktio_a)

rktio_str.append("rktio_get_seconds")

@expose("rktio_get_seconds", [W_R_PTR], simple=True)
def rktio_get_seconds(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_seconds(r_rktio)

	# returns RKTIO_TIMESTAMP_T
	return values.W_Fixnum(res)


c_rktio_get_process_children_milliseconds = rffi.llexternal('rktio_get_process_children_milliseconds', [R_PTR], UINTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_get_process_children_milliseconds")

@expose("rktio_get_process_children_milliseconds", [W_R_PTR], simple=True)
def rktio_get_process_children_milliseconds(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_process_children_milliseconds(r_rktio)

	# returns UINTPTR_T
	return values.W_Fixnum(res)


c_rktio_get_process_milliseconds = rffi.llexternal('rktio_get_process_milliseconds', [R_PTR], UINTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_get_process_milliseconds")

@expose("rktio_get_process_milliseconds", [W_R_PTR], simple=True)
def rktio_get_process_milliseconds(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_process_milliseconds(r_rktio)

	# returns UINTPTR_T
	return values.W_Fixnum(res)


c_rktio_get_inexact_monotonic_milliseconds = rffi.llexternal('rktio_get_inexact_monotonic_milliseconds', [R_PTR], DOUBLE, compilation_info=librktio_a)

rktio_str.append("rktio_get_inexact_monotonic_milliseconds")

@expose("rktio_get_inexact_monotonic_milliseconds", [W_R_PTR], simple=True)
def rktio_get_inexact_monotonic_milliseconds(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_inexact_monotonic_milliseconds(r_rktio)

	# returns DOUBLE
	return values.W_Fixnum(res)


c_rktio_get_inexact_milliseconds = rffi.llexternal('rktio_get_inexact_milliseconds', [], DOUBLE, compilation_info=librktio_a)

rktio_str.append("rktio_get_inexact_milliseconds")

@expose("rktio_get_inexact_milliseconds", [], simple=True)
def rktio_get_inexact_milliseconds():


	res = c_rktio_get_inexact_milliseconds()

	# returns DOUBLE
	return values.W_Fixnum(res)


c_rktio_get_milliseconds = rffi.llexternal('rktio_get_milliseconds', [], UINTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_get_milliseconds")

@expose("rktio_get_milliseconds", [], simple=True)
def rktio_get_milliseconds():


	res = c_rktio_get_milliseconds()

	# returns UINTPTR_T
	return values.W_Fixnum(res)


c_rktio_will_modify_os_signal_handler = rffi.llexternal('rktio_will_modify_os_signal_handler', [INT], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_will_modify_os_signal_handler")

@expose("rktio_will_modify_os_signal_handler", [values.W_Fixnum], simple=True)
def rktio_will_modify_os_signal_handler(w_sig_id):

	r_sig_id = rffi.cast(rffi.INT, w_sig_id.value)

	res = c_rktio_will_modify_os_signal_handler(r_sig_id)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_os_signal = rffi.llexternal('rktio_poll_os_signal', [R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_poll_os_signal")

@expose("rktio_poll_os_signal", [W_R_PTR], simple=True)
def rktio_poll_os_signal(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_poll_os_signal(r_rktio)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_install_os_signal_handler = rffi.llexternal('rktio_install_os_signal_handler', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_install_os_signal_handler")

@expose("rktio_install_os_signal_handler", [W_R_PTR], simple=True)
def rktio_install_os_signal_handler(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_install_os_signal_handler(r_rktio)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_flush_signals_received = rffi.llexternal('rktio_flush_signals_received', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_flush_signals_received")

@expose("rktio_flush_signals_received", [W_R_PTR], simple=True)
def rktio_flush_signals_received(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_flush_signals_received(r_rktio)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_wait_until_signal_received = rffi.llexternal('rktio_wait_until_signal_received', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_wait_until_signal_received")

@expose("rktio_wait_until_signal_received", [W_R_PTR], simple=True)
def rktio_wait_until_signal_received(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_wait_until_signal_received(r_rktio)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_signal_received = rffi.llexternal('rktio_signal_received', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_signal_received")

@expose("rktio_signal_received", [W_R_PTR], simple=True)
def rktio_signal_received(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_signal_received(r_rktio)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_signal_received_at = rffi.llexternal('rktio_signal_received_at', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_signal_received_at")

@expose("rktio_signal_received_at", [W_R_PTR], simple=True)
def rktio_signal_received_at(w_h):

	r_h = rffi.cast(R_PTR, w_h.to_rffi())

	res = c_rktio_signal_received_at(r_h)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_get_signal_handle = rffi.llexternal('rktio_get_signal_handle', [R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_get_signal_handle")

@expose("rktio_get_signal_handle", [W_R_PTR], simple=True)
def rktio_get_signal_handle(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_signal_handle(r_rktio)

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_uname = rffi.llexternal('rktio_uname', [R_PTR], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_uname")

@expose("rktio_uname", [W_R_PTR], simple=True)
def rktio_uname(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_uname(r_rktio)

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_copy_file_stop = rffi.llexternal('rktio_copy_file_stop', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_copy_file_stop")

@expose("rktio_copy_file_stop", [W_R_PTR, W_R_PTR], simple=True)
def rktio_copy_file_stop(w_rktio, w_fc):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fc = rffi.cast(R_PTR, w_fc.to_rffi())

	res = c_rktio_copy_file_stop(r_rktio, r_fc)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_copy_file_is_done = rffi.llexternal('rktio_copy_file_is_done', [R_PTR, R_PTR], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_copy_file_is_done")

@expose("rktio_copy_file_is_done", [W_R_PTR, W_R_PTR], simple=True)
def rktio_copy_file_is_done(w_rktio, w_fc):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fc = rffi.cast(R_PTR, w_fc.to_rffi())

	res = c_rktio_copy_file_is_done(r_rktio, r_fc)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_directory_list_stop = rffi.llexternal('rktio_directory_list_stop', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_directory_list_stop")

@expose("rktio_directory_list_stop", [W_R_PTR, W_R_PTR], simple=True)
def rktio_directory_list_stop(w_rktio, w_dl):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_dl = rffi.cast(R_PTR, w_dl.to_rffi())

	res = c_rktio_directory_list_stop(r_rktio, r_dl)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_is_regular_file = rffi.llexternal('rktio_is_regular_file', [R_PTR, RKTIO_CONST_STRING_T], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_is_regular_file")

@expose("rktio_is_regular_file", [W_R_PTR, values_string.W_String], simple=True)
def rktio_is_regular_file(w_rktio, w_filename):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	res = c_rktio_is_regular_file(r_rktio, r_filename)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_link_exists = rffi.llexternal('rktio_link_exists', [R_PTR, RKTIO_CONST_STRING_T], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_link_exists")

@expose("rktio_link_exists", [W_R_PTR, values_string.W_String], simple=True)
def rktio_link_exists(w_rktio, w_filename):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	res = c_rktio_link_exists(r_rktio, r_filename)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_directory_exists = rffi.llexternal('rktio_directory_exists', [R_PTR, RKTIO_CONST_STRING_T], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_directory_exists")

@expose("rktio_directory_exists", [W_R_PTR, values_string.W_String], simple=True)
def rktio_directory_exists(w_rktio, w_dirname):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_dirname.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_dirname = rffi.str2charp(p_str)

	res = c_rktio_directory_exists(r_rktio, r_dirname)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_file_exists = rffi.llexternal('rktio_file_exists', [R_PTR, RKTIO_CONST_STRING_T], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_file_exists")

@expose("rktio_file_exists", [W_R_PTR, values_string.W_String], simple=True)
def rktio_file_exists(w_rktio, w_filename):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	res = c_rktio_file_exists(r_rktio, r_filename)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_end_sleep = rffi.llexternal('rktio_end_sleep', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_end_sleep")

@expose("rktio_end_sleep", [W_R_PTR], simple=True)
def rktio_end_sleep(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_end_sleep(r_rktio)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_sleep = rffi.llexternal('rktio_sleep', [R_PTR, FLOAT, R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_sleep")

@expose("rktio_sleep", [W_R_PTR, values.W_Flonum, W_R_PTR, W_R_PTR], simple=True)
def rktio_sleep(w_rktio, w_nsecs, w_fds, w_lt):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_nsecs = rffi.cast(rffi.FLOAT, w_nsecs.value)

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	r_lt = rffi.cast(R_PTR, w_lt.to_rffi())

	res = c_rktio_sleep(r_rktio, r_nsecs, r_fds, r_lt)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_ltps_handle_set_auto = rffi.llexternal('rktio_ltps_handle_set_auto', [R_PTR, R_PTR, INT], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_ltps_handle_set_auto")

@expose("rktio_ltps_handle_set_auto", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_ltps_handle_set_auto(w_rktio, w_lth, w_auto_mode):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lth = rffi.cast(R_PTR, w_lth.to_rffi())

	r_auto_mode = rffi.cast(rffi.INT, w_auto_mode.value)

	res = c_rktio_ltps_handle_set_auto(r_rktio, r_lth, r_auto_mode)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_ltps_remove_all = rffi.llexternal('rktio_ltps_remove_all', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_ltps_remove_all")

@expose("rktio_ltps_remove_all", [W_R_PTR, W_R_PTR], simple=True)
def rktio_ltps_remove_all(w_rktio, w_lt):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lt = rffi.cast(R_PTR, w_lt.to_rffi())

	res = c_rktio_ltps_remove_all(r_rktio, r_lt)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_ltps_handle_get_data = rffi.llexternal('rktio_ltps_handle_get_data', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_ltps_handle_get_data")

@expose("rktio_ltps_handle_get_data", [W_R_PTR, W_R_PTR], simple=True)
def rktio_ltps_handle_get_data(w_rktio, w_h):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_h = rffi.cast(R_PTR, w_h.to_rffi())

	res = c_rktio_ltps_handle_get_data(r_rktio, r_h)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_ltps_handle_set_data = rffi.llexternal('rktio_ltps_handle_set_data', [R_PTR, R_PTR, VOID], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_ltps_handle_set_data")

@expose("rktio_ltps_handle_set_data", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_ltps_handle_set_data(w_rktio, w_h, w_data):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_h = rffi.cast(R_PTR, w_h.to_rffi())

	r_data = rffi.cast(rffi.VOIDP, w_data.value)

	res = c_rktio_ltps_handle_set_data(r_rktio, r_h, r_data)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_ltps_close = rffi.llexternal('rktio_ltps_close', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_ltps_close")

@expose("rktio_ltps_close", [W_R_PTR, W_R_PTR], simple=True)
def rktio_ltps_close(w_rktio, w_lt):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lt = rffi.cast(R_PTR, w_lt.to_rffi())

	res = c_rktio_ltps_close(r_rktio, r_lt)

	# returns VOID
	return values.W_Fixnum(res)


c_rkio_reset_sleep_backoff = rffi.llexternal('rkio_reset_sleep_backoff', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rkio_reset_sleep_backoff")

@expose("rkio_reset_sleep_backoff", [W_R_PTR], simple=True)
def rkio_reset_sleep_backoff(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rkio_reset_sleep_backoff(r_rktio)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_set_add_eventmask = rffi.llexternal('rktio_poll_set_add_eventmask', [R_PTR, R_PTR, INT], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_poll_set_add_eventmask")

@expose("rktio_poll_set_add_eventmask", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_poll_set_add_eventmask(w_rktio, w_fds, w_mask):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	r_mask = rffi.cast(rffi.INT, w_mask.value)

	res = c_rktio_poll_set_add_eventmask(r_rktio, r_fds, r_mask)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_set_add_handle = rffi.llexternal('rktio_poll_set_add_handle', [R_PTR, INTPTR_T, R_PTR, INT], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_poll_set_add_handle")

@expose("rktio_poll_set_add_handle", [W_R_PTR, values.W_Fixnum, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_poll_set_add_handle(w_rktio, w_h, w_fds, w_repost):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_h = rffi.cast(rffi.SSIZE_T, w_h.value)

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	r_repost = rffi.cast(rffi.INT, w_repost.value)

	res = c_rktio_poll_set_add_handle(r_rktio, r_h, r_fds, r_repost)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_set_add_nosleep = rffi.llexternal('rktio_poll_set_add_nosleep', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_poll_set_add_nosleep")

@expose("rktio_poll_set_add_nosleep", [W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_set_add_nosleep(w_rktio, w_fds):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	res = c_rktio_poll_set_add_nosleep(r_rktio, r_fds)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_add_fs_change = rffi.llexternal('rktio_poll_add_fs_change', [R_PTR, R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_poll_add_fs_change")

@expose("rktio_poll_add_fs_change", [W_R_PTR, W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_add_fs_change(w_rktio, w_fc, w_fds):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fc = rffi.cast(R_PTR, w_fc.to_rffi())

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	res = c_rktio_poll_add_fs_change(r_rktio, r_fc, r_fds)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_add_process = rffi.llexternal('rktio_poll_add_process', [R_PTR, R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_poll_add_process")

@expose("rktio_poll_add_process", [W_R_PTR, W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_add_process(w_rktio, w_sp, w_fds):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_sp = rffi.cast(R_PTR, w_sp.to_rffi())

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	res = c_rktio_poll_add_process(r_rktio, r_sp, r_fds)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_add_addrinfo_lookup = rffi.llexternal('rktio_poll_add_addrinfo_lookup', [R_PTR, R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_poll_add_addrinfo_lookup")

@expose("rktio_poll_add_addrinfo_lookup", [W_R_PTR, W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_add_addrinfo_lookup(w_rktio, w_lookup, w_fds):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lookup = rffi.cast(R_PTR, w_lookup.to_rffi())

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	res = c_rktio_poll_add_addrinfo_lookup(r_rktio, r_lookup, r_fds)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_add_connect = rffi.llexternal('rktio_poll_add_connect', [R_PTR, R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_poll_add_connect")

@expose("rktio_poll_add_connect", [W_R_PTR, W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_add_connect(w_rktio, w_conn, w_fds):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_conn = rffi.cast(R_PTR, w_conn.to_rffi())

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	res = c_rktio_poll_add_connect(r_rktio, r_conn, r_fds)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_add_accept = rffi.llexternal('rktio_poll_add_accept', [R_PTR, R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_poll_add_accept")

@expose("rktio_poll_add_accept", [W_R_PTR, W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_add_accept(w_rktio, w_listener, w_fds):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_listener = rffi.cast(R_PTR, w_listener.to_rffi())

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	res = c_rktio_poll_add_accept(r_rktio, r_listener, r_fds)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_add = rffi.llexternal('rktio_poll_add', [R_PTR, R_PTR, R_PTR, INT], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_poll_add")

@expose("rktio_poll_add", [W_R_PTR, W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_poll_add(w_rktio, w_rfd, w_fds, w_modes):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	r_modes = rffi.cast(rffi.INT, w_modes.value)

	res = c_rktio_poll_add(r_rktio, r_rfd, r_fds, r_modes)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_poll_set_forget = rffi.llexternal('rktio_poll_set_forget', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_poll_set_forget")

@expose("rktio_poll_set_forget", [W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_set_forget(w_rktio, w_fds):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	res = c_rktio_poll_set_forget(r_rktio, r_fds)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_fs_change_forget = rffi.llexternal('rktio_fs_change_forget', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_fs_change_forget")

@expose("rktio_fs_change_forget", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fs_change_forget(w_rktio, w_fc):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fc = rffi.cast(R_PTR, w_fc.to_rffi())

	res = c_rktio_fs_change_forget(r_rktio, r_fc)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_fs_change_properties = rffi.llexternal('rktio_fs_change_properties', [R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_fs_change_properties")

@expose("rktio_fs_change_properties", [W_R_PTR], simple=True)
def rktio_fs_change_properties(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_fs_change_properties(r_rktio)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_reap_processes = rffi.llexternal('rktio_reap_processes', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_reap_processes")

@expose("rktio_reap_processes", [W_R_PTR], simple=True)
def rktio_reap_processes(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_reap_processes(r_rktio)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_process_forget = rffi.llexternal('rktio_process_forget', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_process_forget")

@expose("rktio_process_forget", [W_R_PTR, W_R_PTR], simple=True)
def rktio_process_forget(w_rktio, w_sp):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_sp = rffi.cast(R_PTR, w_sp.to_rffi())

	res = c_rktio_process_forget(r_rktio, r_sp)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_process_pid = rffi.llexternal('rktio_process_pid', [R_PTR, R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_process_pid")

@expose("rktio_process_pid", [W_R_PTR, W_R_PTR], simple=True)
def rktio_process_pid(w_rktio, w_sp):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_sp = rffi.cast(R_PTR, w_sp.to_rffi())

	res = c_rktio_process_pid(r_rktio, r_sp)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_process_allowed_flags = rffi.llexternal('rktio_process_allowed_flags', [R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_process_allowed_flags")

@expose("rktio_process_allowed_flags", [W_R_PTR], simple=True)
def rktio_process_allowed_flags(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_process_allowed_flags(r_rktio)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_envvars_count = rffi.llexternal('rktio_envvars_count', [R_PTR, R_PTR], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_envvars_count")

@expose("rktio_envvars_count", [W_R_PTR, W_R_PTR], simple=True)
def rktio_envvars_count(w_rktio, w_envvars):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_envvars = rffi.cast(R_PTR, w_envvars.to_rffi())

	res = c_rktio_envvars_count(r_rktio, r_envvars)

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_envvars_set = rffi.llexternal('rktio_envvars_set', [R_PTR, R_PTR, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_envvars_set")

@expose("rktio_envvars_set", [W_R_PTR, W_R_PTR, values_string.W_String, values_string.W_String], simple=True)
def rktio_envvars_set(w_rktio, w_envvars, w_name, w_value):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_envvars = rffi.cast(R_PTR, w_envvars.to_rffi())

	_p_str = w_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_name = rffi.str2charp(p_str)

	_p_str = w_value.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_value = rffi.str2charp(p_str)

	res = c_rktio_envvars_set(r_rktio, r_envvars, r_name, r_value)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_envvars_free = rffi.llexternal('rktio_envvars_free', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_envvars_free")

@expose("rktio_envvars_free", [W_R_PTR, W_R_PTR], simple=True)
def rktio_envvars_free(w_rktio, w_envvars):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_envvars = rffi.cast(R_PTR, w_envvars.to_rffi())

	res = c_rktio_envvars_free(r_rktio, r_envvars)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_are_envvar_names_case_insensitive = rffi.llexternal('rktio_are_envvar_names_case_insensitive', [R_PTR], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_are_envvar_names_case_insensitive")

@expose("rktio_are_envvar_names_case_insensitive", [W_R_PTR], simple=True)
def rktio_are_envvar_names_case_insensitive(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_are_envvar_names_case_insensitive(r_rktio)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_is_ok_envvar_name = rffi.llexternal('rktio_is_ok_envvar_name', [R_PTR, RKTIO_CONST_STRING_T], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_is_ok_envvar_name")

@expose("rktio_is_ok_envvar_name", [W_R_PTR, values_string.W_String], simple=True)
def rktio_is_ok_envvar_name(w_rktio, w_name):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_name = rffi.str2charp(p_str)

	res = c_rktio_is_ok_envvar_name(r_rktio, r_name)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_connect_stop = rffi.llexternal('rktio_connect_stop', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_connect_stop")

@expose("rktio_connect_stop", [W_R_PTR, W_R_PTR], simple=True)
def rktio_connect_stop(w_rktio, w_conn):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_conn = rffi.cast(R_PTR, w_conn.to_rffi())

	res = c_rktio_connect_stop(r_rktio, r_conn)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_listen_stop = rffi.llexternal('rktio_listen_stop', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_listen_stop")

@expose("rktio_listen_stop", [W_R_PTR, W_R_PTR], simple=True)
def rktio_listen_stop(w_rktio, w_l):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_l = rffi.cast(R_PTR, w_l.to_rffi())

	res = c_rktio_listen_stop(r_rktio, r_l)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_addrinfo_free = rffi.llexternal('rktio_addrinfo_free', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_addrinfo_free")

@expose("rktio_addrinfo_free", [W_R_PTR, W_R_PTR], simple=True)
def rktio_addrinfo_free(w_rktio, w_a):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_a = rffi.cast(R_PTR, w_a.to_rffi())

	res = c_rktio_addrinfo_free(r_rktio, r_a)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_addrinfo_lookup_stop = rffi.llexternal('rktio_addrinfo_lookup_stop', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_addrinfo_lookup_stop")

@expose("rktio_addrinfo_lookup_stop", [W_R_PTR, W_R_PTR], simple=True)
def rktio_addrinfo_lookup_stop(w_rktio, w_lookup):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lookup = rffi.cast(R_PTR, w_lookup.to_rffi())

	res = c_rktio_addrinfo_lookup_stop(r_rktio, r_lookup)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_get_ipv4_family = rffi.llexternal('rktio_get_ipv4_family', [R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_get_ipv4_family")

@expose("rktio_get_ipv4_family", [W_R_PTR], simple=True)
def rktio_get_ipv4_family(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_ipv4_family(r_rktio)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_fd_close_transfer = rffi.llexternal('rktio_fd_close_transfer', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_fd_close_transfer")

@expose("rktio_fd_close_transfer", [W_R_PTR], simple=True)
def rktio_fd_close_transfer(w_rfdt):

	r_rfdt = rffi.cast(R_PTR, w_rfdt.to_rffi())

	res = c_rktio_fd_close_transfer(r_rfdt)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_fd_attach = rffi.llexternal('rktio_fd_attach', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_fd_attach")

@expose("rktio_fd_attach", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_attach(w_rktio, w_rfdt):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfdt = rffi.cast(R_PTR, w_rfdt.to_rffi())

	res = c_rktio_fd_attach(r_rktio, r_rfdt)

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_fd_detach = rffi.llexternal('rktio_fd_detach', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_fd_detach")

@expose("rktio_fd_detach", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_detach(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_fd_detach(r_rktio, r_rfd)

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_buffered_byte_count = rffi.llexternal('rktio_buffered_byte_count', [R_PTR, R_PTR], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_buffered_byte_count")

@expose("rktio_buffered_byte_count", [W_R_PTR, W_R_PTR], simple=True)
def rktio_buffered_byte_count(w_rktio, w_fd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	res = c_rktio_buffered_byte_count(r_rktio, r_fd)

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_create_console = rffi.llexternal('rktio_create_console', [], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_create_console")

@expose("rktio_create_console", [], simple=True)
def rktio_create_console():


	res = c_rktio_create_console()

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_forget = rffi.llexternal('rktio_forget', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_forget")

@expose("rktio_forget", [W_R_PTR, W_R_PTR], simple=True)
def rktio_forget(w_rktio, w_fd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	res = c_rktio_forget(r_rktio, r_fd)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_close_noerr = rffi.llexternal('rktio_close_noerr', [R_PTR, R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_close_noerr")

@expose("rktio_close_noerr", [W_R_PTR, W_R_PTR], simple=True)
def rktio_close_noerr(w_rktio, w_fd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	res = c_rktio_close_noerr(r_rktio, r_fd)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_fd_modes = rffi.llexternal('rktio_fd_modes', [R_PTR, R_PTR], INT, compilation_info=librktio_a)

rktio_str.append("rktio_fd_modes")

@expose("rktio_fd_modes", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_modes(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_fd_modes(r_rktio, r_rfd)

	# returns INT
	return values.W_Fixnum(res)


c_rktio_fd_is_pending_open = rffi.llexternal('rktio_fd_is_pending_open', [R_PTR, R_PTR], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_fd_is_pending_open")

@expose("rktio_fd_is_pending_open", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_is_pending_open(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_fd_is_pending_open(r_rktio, r_rfd)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_fd_is_text_converted = rffi.llexternal('rktio_fd_is_text_converted', [R_PTR, R_PTR], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_fd_is_text_converted")

@expose("rktio_fd_is_text_converted", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_is_text_converted(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_fd_is_text_converted(r_rktio, r_rfd)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_fd_is_terminal = rffi.llexternal('rktio_fd_is_terminal', [R_PTR, R_PTR], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_fd_is_terminal")

@expose("rktio_fd_is_terminal", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_is_terminal(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_fd_is_terminal(r_rktio, r_rfd)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_fd_is_udp = rffi.llexternal('rktio_fd_is_udp', [R_PTR, R_PTR], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_fd_is_udp")

@expose("rktio_fd_is_udp", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_is_udp(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_fd_is_udp(r_rktio, r_rfd)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_fd_is_socket = rffi.llexternal('rktio_fd_is_socket', [R_PTR, R_PTR], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_fd_is_socket")

@expose("rktio_fd_is_socket", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_is_socket(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_fd_is_socket(r_rktio, r_rfd)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_fd_is_directory = rffi.llexternal('rktio_fd_is_directory', [R_PTR, R_PTR], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_fd_is_directory")

@expose("rktio_fd_is_directory", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_is_directory(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_fd_is_directory(r_rktio, r_rfd)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_fd_is_regular_file = rffi.llexternal('rktio_fd_is_regular_file', [R_PTR, R_PTR], RKTIO_BOOL_T, compilation_info=librktio_a)

rktio_str.append("rktio_fd_is_regular_file")

@expose("rktio_fd_is_regular_file", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_is_regular_file(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_fd_is_regular_file(r_rktio, r_rfd)

	# returns RKTIO_BOOL_T
	return values.W_Fixnum(res)


c_rktio_fd_system_fd = rffi.llexternal('rktio_fd_system_fd', [R_PTR, R_PTR], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_fd_system_fd")

@expose("rktio_fd_system_fd", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_system_fd(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_fd_system_fd(r_rktio, r_rfd)

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_set_dll_path = rffi.llexternal('rktio_set_dll_path', [RKTIO_CHAR16_T], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_set_dll_path")

@expose("rktio_set_dll_path", [values.W_Fixnum], simple=True)
def rktio_set_dll_path(w_p):

	r_p = rffi.cast(rffi.INT, w_p.value)

	res = c_rktio_set_dll_path(r_p)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_free = rffi.llexternal('rktio_free', [VOID], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_free")

@expose("rktio_free", [values.W_Fixnum], simple=True)
def rktio_free(w_p):

	r_p = rffi.cast(rffi.VOIDP, w_p.value)

	res = c_rktio_free(r_p)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_destroy = rffi.llexternal('rktio_destroy', [R_PTR], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_destroy")

@expose("rktio_destroy", [W_R_PTR], simple=True)
def rktio_destroy(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_destroy(r_rktio)

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_init = rffi.llexternal('rktio_init', [], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_init")

@expose("rktio_init", [], simple=True)
def rktio_init():


	res = c_rktio_init()

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_dll_get_error = rffi.llexternal('rktio_dll_get_error', [R_PTR], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_dll_get_error")

@expose("rktio_dll_get_error", [W_R_PTR], simple=True)
def rktio_dll_get_error(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_dll_get_error(r_rktio)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_dll_get_error),(c_rktio_get_last_error rktio_dll_get_error)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_dll_close = rffi.llexternal('rktio_dll_close', [R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_dll_close")

@expose("rktio_dll_close", [W_R_PTR, W_R_PTR], simple=True)
def rktio_dll_close(w_rktio, w_dll):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_dll = rffi.cast(R_PTR, w_dll.to_rffi())

	res = c_rktio_dll_close(r_rktio, r_dll)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_dll_close),(c_rktio_get_last_error rktio_dll_close)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_dll_find_object = rffi.llexternal('rktio_dll_find_object', [R_PTR, R_PTR, RKTIO_CONST_STRING_T], VOID, compilation_info=librktio_a)

rktio_str.append("rktio_dll_find_object")

@expose("rktio_dll_find_object", [W_R_PTR, W_R_PTR, values_string.W_String], simple=True)
def rktio_dll_find_object(w_rktio, w_dll, w_name):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_dll = rffi.cast(R_PTR, w_dll.to_rffi())

	_p_str = w_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_name = rffi.str2charp(p_str)

	res = c_rktio_dll_find_object(r_rktio, r_dll, r_name)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_dll_find_object),(c_rktio_get_last_error rktio_dll_find_object)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns VOID
	return values.W_Fixnum(res)


c_rktio_dll_open = rffi.llexternal('rktio_dll_open', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_BOOL_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_dll_open")

@expose("rktio_dll_open", [W_R_PTR, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_dll_open(w_rktio, w_name, w_as_global):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_name = rffi.str2charp(p_str)

	r_as_global = rffi.cast(rffi.INT, 1 if w_as_global is values.w_true else 0)

	res = c_rktio_dll_open(r_rktio, r_name, r_as_global)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_dll_open),(c_rktio_get_last_error rktio_dll_open)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_system_language_country = rffi.llexternal('rktio_system_language_country', [R_PTR], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_system_language_country")

@expose("rktio_system_language_country", [W_R_PTR], simple=True)
def rktio_system_language_country(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_system_language_country(r_rktio)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_system_language_country),(c_rktio_get_last_error rktio_system_language_country)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_locale_encoding = rffi.llexternal('rktio_locale_encoding', [R_PTR], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_locale_encoding")

@expose("rktio_locale_encoding", [W_R_PTR], simple=True)
def rktio_locale_encoding(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_locale_encoding(r_rktio)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_locale_encoding),(c_rktio_get_last_error rktio_locale_encoding)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_convert_in = rffi.llexternal('rktio_convert_in', [R_PTR, R_PTR, CCHARP, INTPTR_T, INTPTR_T, CCHARP, INTPTR_T, INTPTR_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_convert_in")

@expose("rktio_convert_in", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_convert_in(w_rktio, w_cvt, w_in, w_in_start, w_in_end, w_out, w_out_start, w_out_end):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_cvt = rffi.cast(R_PTR, w_cvt.to_rffi())

	r_in = rffi.cast(rffi.CCHARP, w_in.value)

	r_in_start = rffi.cast(rffi.SSIZE_T, w_in_start.value)

	r_in_end = rffi.cast(rffi.SSIZE_T, w_in_end.value)

	r_out = rffi.cast(rffi.CCHARP, w_out.value)

	r_out_start = rffi.cast(rffi.SSIZE_T, w_out_start.value)

	r_out_end = rffi.cast(rffi.SSIZE_T, w_out_end.value)

	res = c_rktio_convert_in(r_rktio, r_cvt, r_in, r_in_start, r_in_end, r_out, r_out_start, r_out_end)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_convert_in),(c_rktio_get_last_error rktio_convert_in)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_convert = rffi.llexternal('rktio_convert', [R_PTR, R_PTR, CCHARPP, INTPTR_T, CCHARPP, INTPTR_T], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_convert")

@expose("rktio_convert", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_convert(w_rktio, w_cvt, w_in, w_in_left, w_out, w_out_left):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_cvt = rffi.cast(R_PTR, w_cvt.to_rffi())

	r_in = rffi.cast(rffi.CCHARPP, w_in.value)

	r_in_left = rffi.cast(rffi.SSIZE_T, w_in_left.value)

	r_out = rffi.cast(rffi.CCHARPP, w_out.value)

	r_out_left = rffi.cast(rffi.SSIZE_T, w_out_left.value)

	res = c_rktio_convert(r_rktio, r_cvt, r_in, r_in_left, r_out, r_out_left)

	if res == RKTIO_CONVERT_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_convert),(c_rktio_get_last_error rktio_convert)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_converter_open = rffi.llexternal('rktio_converter_open', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_converter_open")

@expose("rktio_converter_open", [W_R_PTR, values_string.W_String, values_string.W_String], simple=True)
def rktio_converter_open(w_rktio, w_to_enc, w_from_enc):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_to_enc.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_to_enc = rffi.str2charp(p_str)

	_p_str = w_from_enc.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_from_enc = rffi.str2charp(p_str)

	res = c_rktio_converter_open(r_rktio, r_to_enc, r_from_enc)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_converter_open),(c_rktio_get_last_error rktio_converter_open)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_syslog = rffi.llexternal('rktio_syslog', [R_PTR, INT, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_syslog")

@expose("rktio_syslog", [W_R_PTR, values.W_Fixnum, values_string.W_String, values_string.W_String, values_string.W_String], simple=True)
def rktio_syslog(w_rktio, w_level, w_name, w_msg, w_exec_name):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_level = rffi.cast(rffi.INT, w_level.value)

	_p_str = w_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_name = rffi.str2charp(p_str)

	_p_str = w_msg.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_msg = rffi.str2charp(p_str)

	_p_str = w_exec_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_exec_name = rffi.str2charp(p_str)

	res = c_rktio_syslog(r_rktio, r_level, r_name, r_msg, r_exec_name)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_syslog),(c_rktio_get_last_error rktio_syslog)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_path_to_wide_path = rffi.llexternal('rktio_path_to_wide_path', [R_PTR, RKTIO_CONST_STRING_T], RKTIO_CHAR16_T, compilation_info=librktio_a)

rktio_str.append("rktio_path_to_wide_path")

@expose("rktio_path_to_wide_path", [W_R_PTR, values_string.W_String], simple=True)
def rktio_path_to_wide_path(w_rktio, w_p):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_p.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_p = rffi.str2charp(p_str)

	res = c_rktio_path_to_wide_path(r_rktio, r_p)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_path_to_wide_path),(c_rktio_get_last_error rktio_path_to_wide_path)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_CHAR16_T
	return values.W_Fixnum(res)


c_rktio_shell_execute = rffi.llexternal('rktio_shell_execute', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T, INT], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_shell_execute")

@expose("rktio_shell_execute", [W_R_PTR, values_string.W_String, values_string.W_String, values_string.W_String, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_shell_execute(w_rktio, w_verb, w_target, w_arg, w_dir, w_show_mode):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_verb.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_verb = rffi.str2charp(p_str)

	_p_str = w_target.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_target = rffi.str2charp(p_str)

	_p_str = w_arg.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_arg = rffi.str2charp(p_str)

	_p_str = w_dir.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_dir = rffi.str2charp(p_str)

	r_show_mode = rffi.cast(rffi.INT, w_show_mode.value)

	res = c_rktio_shell_execute(r_rktio, r_verb, r_target, r_arg, r_dir, r_show_mode)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_shell_execute),(c_rktio_get_last_error rktio_shell_execute)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_seconds_to_date = rffi.llexternal('rktio_seconds_to_date', [R_PTR, RKTIO_TIMESTAMP_T, INT, INT], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_seconds_to_date")

@expose("rktio_seconds_to_date", [W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_seconds_to_date(w_rktio, w_seconds, w_nanoseconds, w_get_gmt):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_seconds = rffi.cast(rffi.SSIZE_T, w_seconds.value)

	r_nanoseconds = rffi.cast(rffi.INT, w_nanoseconds.value)

	r_get_gmt = rffi.cast(rffi.INT, w_get_gmt.value)

	res = c_rktio_seconds_to_date(r_rktio, r_seconds, r_nanoseconds, r_get_gmt)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_seconds_to_date),(c_rktio_get_last_error rktio_seconds_to_date)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_expand_user_tilde = rffi.llexternal('rktio_expand_user_tilde', [R_PTR, RKTIO_CONST_STRING_T], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_expand_user_tilde")

@expose("rktio_expand_user_tilde", [W_R_PTR, values_string.W_String], simple=True)
def rktio_expand_user_tilde(w_rktio, w_filename):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	res = c_rktio_expand_user_tilde(r_rktio, r_filename)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_expand_user_tilde),(c_rktio_get_last_error rktio_expand_user_tilde)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_system_path = rffi.llexternal('rktio_system_path', [R_PTR, INT], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_system_path")

@expose("rktio_system_path", [W_R_PTR, values.W_Fixnum], simple=True)
def rktio_system_path(w_rktio, w_which):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_which = rffi.cast(rffi.INT, w_which.value)

	res = c_rktio_system_path(r_rktio, r_which)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_system_path),(c_rktio_get_last_error rktio_system_path)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_filesystem_roots = rffi.llexternal('rktio_filesystem_roots', [R_PTR], CCHARPP, compilation_info=librktio_a)

rktio_str.append("rktio_filesystem_roots")

@expose("rktio_filesystem_roots", [W_R_PTR], simple=True)
def rktio_filesystem_roots(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_filesystem_roots(r_rktio)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_filesystem_roots),(c_rktio_get_last_error rktio_filesystem_roots)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARPP
	return values.W_Fixnum(res)


c_rktio_directory_list_step = rffi.llexternal('rktio_directory_list_step', [R_PTR, R_PTR], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_directory_list_step")

@expose("rktio_directory_list_step", [W_R_PTR, W_R_PTR], simple=True)
def rktio_directory_list_step(w_rktio, w_dl):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_dl = rffi.cast(R_PTR, w_dl.to_rffi())

	res = c_rktio_directory_list_step(r_rktio, r_dl)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_directory_list_step),(c_rktio_get_last_error rktio_directory_list_step)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_directory_list_start = rffi.llexternal('rktio_directory_list_start', [R_PTR, RKTIO_CONST_STRING_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_directory_list_start")

@expose("rktio_directory_list_start", [W_R_PTR, values_string.W_String], simple=True)
def rktio_directory_list_start(w_rktio, w_dirname):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_dirname.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_dirname = rffi.str2charp(p_str)

	res = c_rktio_directory_list_start(r_rktio, r_dirname)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_directory_list_start),(c_rktio_get_last_error rktio_directory_list_start)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_set_file_or_directory_permissions = rffi.llexternal('rktio_set_file_or_directory_permissions', [R_PTR, RKTIO_CONST_STRING_T, INT], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_set_file_or_directory_permissions")

@expose("rktio_set_file_or_directory_permissions", [W_R_PTR, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_set_file_or_directory_permissions(w_rktio, w_filename, w_new_bits):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	r_new_bits = rffi.cast(rffi.INT, w_new_bits.value)

	res = c_rktio_set_file_or_directory_permissions(r_rktio, r_filename, r_new_bits)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_set_file_or_directory_permissions),(c_rktio_get_last_error rktio_set_file_or_directory_permissions)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_get_file_or_directory_permissions = rffi.llexternal('rktio_get_file_or_directory_permissions', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_BOOL_T], INT, compilation_info=librktio_a)

rktio_str.append("rktio_get_file_or_directory_permissions")

@expose("rktio_get_file_or_directory_permissions", [W_R_PTR, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_get_file_or_directory_permissions(w_rktio, w_filename, w_all_bits):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	r_all_bits = rffi.cast(rffi.INT, 1 if w_all_bits is values.w_true else 0)

	res = c_rktio_get_file_or_directory_permissions(r_rktio, r_filename, r_all_bits)

	if res == RKTIO_PERMISSION_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_get_file_or_directory_permissions),(c_rktio_get_last_error rktio_get_file_or_directory_permissions)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INT
	return values.W_Fixnum(res)


c_rktio_path_identity = rffi.llexternal('rktio_path_identity', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_BOOL_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_path_identity")

@expose("rktio_path_identity", [W_R_PTR, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_path_identity(w_rktio, w_path, w_follow_links):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_path.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_path = rffi.str2charp(p_str)

	r_follow_links = rffi.cast(rffi.INT, 1 if w_follow_links is values.w_true else 0)

	res = c_rktio_path_identity(r_rktio, r_path, r_follow_links)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_path_identity),(c_rktio_get_last_error rktio_path_identity)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_fd_identity = rffi.llexternal('rktio_fd_identity', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_fd_identity")

@expose("rktio_fd_identity", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_identity(w_rktio, w_fd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	res = c_rktio_fd_identity(r_rktio, r_fd)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_fd_identity),(c_rktio_get_last_error rktio_fd_identity)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_fd_stat = rffi.llexternal('rktio_fd_stat', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_fd_stat")

@expose("rktio_fd_stat", [W_R_PTR, W_R_PTR], simple=True)
def rktio_fd_stat(w_rktio, w_fd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	res = c_rktio_fd_stat(r_rktio, r_fd)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_fd_stat),(c_rktio_get_last_error rktio_fd_stat)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_file_or_directory_stat = rffi.llexternal('rktio_file_or_directory_stat', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_BOOL_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_file_or_directory_stat")

@expose("rktio_file_or_directory_stat", [W_R_PTR, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_file_or_directory_stat(w_rktio, w_path, w_follow_links):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_path.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_path = rffi.str2charp(p_str)

	r_follow_links = rffi.cast(rffi.INT, 1 if w_follow_links is values.w_true else 0)

	res = c_rktio_file_or_directory_stat(r_rktio, r_path, r_follow_links)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_file_or_directory_stat),(c_rktio_get_last_error rktio_file_or_directory_stat)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_set_file_modify_seconds = rffi.llexternal('rktio_set_file_modify_seconds', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_TIMESTAMP_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_set_file_modify_seconds")

@expose("rktio_set_file_modify_seconds", [W_R_PTR, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_set_file_modify_seconds(w_rktio, w_file, w_secs):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_file.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_file = rffi.str2charp(p_str)

	r_secs = rffi.cast(rffi.SSIZE_T, w_secs.value)

	res = c_rktio_set_file_modify_seconds(r_rktio, r_file, r_secs)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_set_file_modify_seconds),(c_rktio_get_last_error rktio_set_file_modify_seconds)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_get_file_modify_seconds = rffi.llexternal('rktio_get_file_modify_seconds', [R_PTR, RKTIO_CONST_STRING_T], RKTIO_TIMESTAMP_T, compilation_info=librktio_a)

rktio_str.append("rktio_get_file_modify_seconds")

@expose("rktio_get_file_modify_seconds", [W_R_PTR, values_string.W_String], simple=True)
def rktio_get_file_modify_seconds(w_rktio, w_file):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_file.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_file = rffi.str2charp(p_str)

	res = c_rktio_get_file_modify_seconds(r_rktio, r_file)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_get_file_modify_seconds),(c_rktio_get_last_error rktio_get_file_modify_seconds)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TIMESTAMP_T
	return values.W_Fixnum(res)


c_rktio_file_size = rffi.llexternal('rktio_file_size', [R_PTR, RKTIO_CONST_STRING_T], RKTIO_FILESIZE_T, compilation_info=librktio_a)

rktio_str.append("rktio_file_size")

@expose("rktio_file_size", [W_R_PTR, values_string.W_String], simple=True)
def rktio_file_size(w_rktio, w_filename):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	res = c_rktio_file_size(r_rktio, r_filename)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_file_size),(c_rktio_get_last_error rktio_file_size)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_FILESIZE_T
	return values.W_Fixnum(res)


c_rktio_make_link = rffi.llexternal('rktio_make_link', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T, RKTIO_BOOL_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_make_link")

@expose("rktio_make_link", [W_R_PTR, values_string.W_String, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_make_link(w_rktio, w_src, w_dest, w_dest_is_directory):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_src.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_src = rffi.str2charp(p_str)

	_p_str = w_dest.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_dest = rffi.str2charp(p_str)

	r_dest_is_directory = rffi.cast(rffi.INT, 1 if w_dest_is_directory is values.w_true else 0)

	res = c_rktio_make_link(r_rktio, r_src, r_dest, r_dest_is_directory)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_make_link),(c_rktio_get_last_error rktio_make_link)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_readlink = rffi.llexternal('rktio_readlink', [R_PTR, RKTIO_CONST_STRING_T], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_readlink")

@expose("rktio_readlink", [W_R_PTR, values_string.W_String], simple=True)
def rktio_readlink(w_rktio, w_fullfilename):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_fullfilename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_fullfilename = rffi.str2charp(p_str)

	res = c_rktio_readlink(r_rktio, r_fullfilename)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_readlink),(c_rktio_get_last_error rktio_readlink)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_delete_directory = rffi.llexternal('rktio_delete_directory', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T, RKTIO_BOOL_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_delete_directory")

@expose("rktio_delete_directory", [W_R_PTR, values_string.W_String, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_delete_directory(w_rktio, w_filename, w_current_directory, w_enable_write_on_fail):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	_p_str = w_current_directory.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_current_directory = rffi.str2charp(p_str)

	r_enable_write_on_fail = rffi.cast(rffi.INT, 1 if w_enable_write_on_fail is values.w_true else 0)

	res = c_rktio_delete_directory(r_rktio, r_filename, r_current_directory, r_enable_write_on_fail)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_delete_directory),(c_rktio_get_last_error rktio_delete_directory)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_make_directory_with_permissions = rffi.llexternal('rktio_make_directory_with_permissions', [R_PTR, RKTIO_CONST_STRING_T, INT], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_make_directory_with_permissions")

@expose("rktio_make_directory_with_permissions", [W_R_PTR, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_make_directory_with_permissions(w_rktio, w_filename, w_perm_bits):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	r_perm_bits = rffi.cast(rffi.INT, w_perm_bits.value)

	res = c_rktio_make_directory_with_permissions(r_rktio, r_filename, r_perm_bits)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_make_directory_with_permissions),(c_rktio_get_last_error rktio_make_directory_with_permissions)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_make_directory = rffi.llexternal('rktio_make_directory', [R_PTR, RKTIO_CONST_STRING_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_make_directory")

@expose("rktio_make_directory", [W_R_PTR, values_string.W_String], simple=True)
def rktio_make_directory(w_rktio, w_filename):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	res = c_rktio_make_directory(r_rktio, r_filename)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_make_directory),(c_rktio_get_last_error rktio_make_directory)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_set_current_directory = rffi.llexternal('rktio_set_current_directory', [R_PTR, RKTIO_CONST_STRING_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_set_current_directory")

@expose("rktio_set_current_directory", [W_R_PTR, values_string.W_String], simple=True)
def rktio_set_current_directory(w_rktio, w_path):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_path.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_path = rffi.str2charp(p_str)

	res = c_rktio_set_current_directory(r_rktio, r_path)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_set_current_directory),(c_rktio_get_last_error rktio_set_current_directory)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_get_current_directory = rffi.llexternal('rktio_get_current_directory', [R_PTR], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_get_current_directory")

@expose("rktio_get_current_directory", [W_R_PTR], simple=True)
def rktio_get_current_directory(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_get_current_directory(r_rktio)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_get_current_directory),(c_rktio_get_last_error rktio_get_current_directory)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_rename_file = rffi.llexternal('rktio_rename_file', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T, RKTIO_BOOL_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_rename_file")

@expose("rktio_rename_file", [W_R_PTR, values_string.W_String, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_rename_file(w_rktio, w_dest, w_src, w_exists_ok):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_dest.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_dest = rffi.str2charp(p_str)

	_p_str = w_src.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_src = rffi.str2charp(p_str)

	r_exists_ok = rffi.cast(rffi.INT, 1 if w_exists_ok is values.w_true else 0)

	res = c_rktio_rename_file(r_rktio, r_dest, r_src, r_exists_ok)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_rename_file),(c_rktio_get_last_error rktio_rename_file)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_delete_file = rffi.llexternal('rktio_delete_file', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_BOOL_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_delete_file")

@expose("rktio_delete_file", [W_R_PTR, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_delete_file(w_rktio, w_fn, w_enable_write_on_fail):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_fn.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_fn = rffi.str2charp(p_str)

	r_enable_write_on_fail = rffi.cast(rffi.INT, 1 if w_enable_write_on_fail is values.w_true else 0)

	res = c_rktio_delete_file(r_rktio, r_fn, r_enable_write_on_fail)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_delete_file),(c_rktio_get_last_error rktio_delete_file)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_file_type = rffi.llexternal('rktio_file_type', [R_PTR, RKTIO_CONST_STRING_T], INT, compilation_info=librktio_a)

rktio_str.append("rktio_file_type")

@expose("rktio_file_type", [W_R_PTR, values_string.W_String], simple=True)
def rktio_file_type(w_rktio, w_filename):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_filename.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_filename = rffi.str2charp(p_str)

	res = c_rktio_file_type(r_rktio, r_filename)

	if res == RKTIO_FILE_TYPE_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_file_type),(c_rktio_get_last_error rktio_file_type)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INT
	return values.W_Fixnum(res)


c_rktio_start_sleep = rffi.llexternal('rktio_start_sleep', [R_PTR, FLOAT, R_PTR, R_PTR, INT], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_start_sleep")

@expose("rktio_start_sleep", [W_R_PTR, values.W_Flonum, W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_start_sleep(w_rktio, w_nsecs, w_fds, w_lt, w_woke_fd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_nsecs = rffi.cast(rffi.FLOAT, w_nsecs.value)

	r_fds = rffi.cast(R_PTR, w_fds.to_rffi())

	r_lt = rffi.cast(R_PTR, w_lt.to_rffi())

	r_woke_fd = rffi.cast(rffi.INT, w_woke_fd.value)

	res = c_rktio_start_sleep(r_rktio, r_nsecs, r_fds, r_lt, r_woke_fd)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_start_sleep),(c_rktio_get_last_error rktio_start_sleep)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_ltps_get_signaled_handle = rffi.llexternal('rktio_ltps_get_signaled_handle', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_ltps_get_signaled_handle")

@expose("rktio_ltps_get_signaled_handle", [W_R_PTR, W_R_PTR], simple=True)
def rktio_ltps_get_signaled_handle(w_rktio, w_lt):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lt = rffi.cast(R_PTR, w_lt.to_rffi())

	res = c_rktio_ltps_get_signaled_handle(r_rktio, r_lt)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_ltps_get_signaled_handle),(c_rktio_get_last_error rktio_ltps_get_signaled_handle)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_ltps_poll = rffi.llexternal('rktio_ltps_poll', [R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_ltps_poll")

@expose("rktio_ltps_poll", [W_R_PTR, W_R_PTR], simple=True)
def rktio_ltps_poll(w_rktio, w_lt):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lt = rffi.cast(R_PTR, w_lt.to_rffi())

	res = c_rktio_ltps_poll(r_rktio, r_lt)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_ltps_poll),(c_rktio_get_last_error rktio_ltps_poll)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_ltps_add = rffi.llexternal('rktio_ltps_add', [R_PTR, R_PTR, R_PTR, INT], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_ltps_add")

@expose("rktio_ltps_add", [W_R_PTR, W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_ltps_add(w_rktio, w_lt, w_rfd, w_mode):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lt = rffi.cast(R_PTR, w_lt.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_mode = rffi.cast(rffi.INT, w_mode.value)

	res = c_rktio_ltps_add(r_rktio, r_lt, r_rfd, r_mode)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_ltps_add),(c_rktio_get_last_error rktio_ltps_add)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_ltps_open = rffi.llexternal('rktio_ltps_open', [R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_ltps_open")

@expose("rktio_ltps_open", [W_R_PTR], simple=True)
def rktio_ltps_open(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_ltps_open(r_rktio)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_ltps_open),(c_rktio_get_last_error rktio_ltps_open)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_make_poll_set = rffi.llexternal('rktio_make_poll_set', [R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_make_poll_set")

@expose("rktio_make_poll_set", [W_R_PTR], simple=True)
def rktio_make_poll_set(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_make_poll_set(r_rktio)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_make_poll_set),(c_rktio_get_last_error rktio_make_poll_set)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_poll_fs_change_ready = rffi.llexternal('rktio_poll_fs_change_ready', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_poll_fs_change_ready")

@expose("rktio_poll_fs_change_ready", [W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_fs_change_ready(w_rktio, w_fc):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fc = rffi.cast(R_PTR, w_fc.to_rffi())

	res = c_rktio_poll_fs_change_ready(r_rktio, r_fc)

	if res == RKTIO_POLL_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_poll_fs_change_ready),(c_rktio_get_last_error rktio_poll_fs_change_ready)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_fs_change = rffi.llexternal('rktio_fs_change', [R_PTR, RKTIO_CONST_STRING_T, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_fs_change")

@expose("rktio_fs_change", [W_R_PTR, values_string.W_String, W_R_PTR], simple=True)
def rktio_fs_change(w_rktio, w_path, w_ltps):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_path.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_path = rffi.str2charp(p_str)

	r_ltps = rffi.cast(R_PTR, w_ltps.to_rffi())

	res = c_rktio_fs_change(r_rktio, r_path, r_ltps)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_fs_change),(c_rktio_get_last_error rktio_fs_change)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_process_status = rffi.llexternal('rktio_process_status', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_process_status")

@expose("rktio_process_status", [W_R_PTR, W_R_PTR], simple=True)
def rktio_process_status(w_rktio, w_sp):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_sp = rffi.cast(R_PTR, w_sp.to_rffi())

	res = c_rktio_process_status(r_rktio, r_sp)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_process_status),(c_rktio_get_last_error rktio_process_status)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_poll_process_done = rffi.llexternal('rktio_poll_process_done', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_poll_process_done")

@expose("rktio_poll_process_done", [W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_process_done(w_rktio, w_sp):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_sp = rffi.cast(R_PTR, w_sp.to_rffi())

	res = c_rktio_poll_process_done(r_rktio, r_sp)

	if res == RKTIO_PROCESS_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_poll_process_done),(c_rktio_get_last_error rktio_poll_process_done)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_process_interrupt = rffi.llexternal('rktio_process_interrupt', [R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_process_interrupt")

@expose("rktio_process_interrupt", [W_R_PTR, W_R_PTR], simple=True)
def rktio_process_interrupt(w_rktio, w_sp):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_sp = rffi.cast(R_PTR, w_sp.to_rffi())

	res = c_rktio_process_interrupt(r_rktio, r_sp)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_process_interrupt),(c_rktio_get_last_error rktio_process_interrupt)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_process_kill = rffi.llexternal('rktio_process_kill', [R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_process_kill")

@expose("rktio_process_kill", [W_R_PTR, W_R_PTR], simple=True)
def rktio_process_kill(w_rktio, w_sp):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_sp = rffi.cast(R_PTR, w_sp.to_rffi())

	res = c_rktio_process_kill(r_rktio, r_sp)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_process_kill),(c_rktio_get_last_error rktio_process_kill)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_process = rffi.llexternal('rktio_process', [R_PTR, RKTIO_CONST_STRING_T, INT, RKTIO_CONST_STRING_T, R_PTR, R_PTR, R_PTR, R_PTR, RKTIO_CONST_STRING_T, R_PTR, INT], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_process")

@expose("rktio_process", [W_R_PTR, values_string.W_String, values.W_Fixnum, values_string.W_String, W_R_PTR, W_R_PTR, W_R_PTR, W_R_PTR, values_string.W_String, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_process(w_rktio, w_command, w_argc, w_argv, w_stdout_fd, w_stdin_fd, w_stderr_fd, w_group_proc, w_current_directory, w_envvars, w_flags):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_command.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_command = rffi.str2charp(p_str)

	r_argc = rffi.cast(rffi.INT, w_argc.value)

	_p_str = w_argv.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_argv = rffi.str2charp(p_str)

	r_stdout_fd = rffi.cast(R_PTR, w_stdout_fd.to_rffi())

	r_stdin_fd = rffi.cast(R_PTR, w_stdin_fd.to_rffi())

	r_stderr_fd = rffi.cast(R_PTR, w_stderr_fd.to_rffi())

	r_group_proc = rffi.cast(R_PTR, w_group_proc.to_rffi())

	_p_str = w_current_directory.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_current_directory = rffi.str2charp(p_str)

	r_envvars = rffi.cast(R_PTR, w_envvars.to_rffi())

	r_flags = rffi.cast(rffi.INT, w_flags.value)

	res = c_rktio_process(r_rktio, r_command, r_argc, r_argv, r_stdout_fd, r_stdin_fd, r_stderr_fd, r_group_proc, r_current_directory, r_envvars, r_flags)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_process),(c_rktio_get_last_error rktio_process)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_envvars_value_ref = rffi.llexternal('rktio_envvars_value_ref', [R_PTR, R_PTR, INTPTR_T], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_envvars_value_ref")

@expose("rktio_envvars_value_ref", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_envvars_value_ref(w_rktio, w_envvars, w_i):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_envvars = rffi.cast(R_PTR, w_envvars.to_rffi())

	r_i = rffi.cast(rffi.SSIZE_T, w_i.value)

	res = c_rktio_envvars_value_ref(r_rktio, r_envvars, r_i)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_envvars_value_ref),(c_rktio_get_last_error rktio_envvars_value_ref)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_envvars_name_ref = rffi.llexternal('rktio_envvars_name_ref', [R_PTR, R_PTR, INTPTR_T], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_envvars_name_ref")

@expose("rktio_envvars_name_ref", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_envvars_name_ref(w_rktio, w_envvars, w_i):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_envvars = rffi.cast(R_PTR, w_envvars.to_rffi())

	r_i = rffi.cast(rffi.SSIZE_T, w_i.value)

	res = c_rktio_envvars_name_ref(r_rktio, r_envvars, r_i)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_envvars_name_ref),(c_rktio_get_last_error rktio_envvars_name_ref)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_envvars_get = rffi.llexternal('rktio_envvars_get', [R_PTR, R_PTR, RKTIO_CONST_STRING_T], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_envvars_get")

@expose("rktio_envvars_get", [W_R_PTR, W_R_PTR, values_string.W_String], simple=True)
def rktio_envvars_get(w_rktio, w_envvars, w_name):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_envvars = rffi.cast(R_PTR, w_envvars.to_rffi())

	_p_str = w_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_name = rffi.str2charp(p_str)

	res = c_rktio_envvars_get(r_rktio, r_envvars, r_name)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_envvars_get),(c_rktio_get_last_error rktio_envvars_get)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_envvars_copy = rffi.llexternal('rktio_envvars_copy', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_envvars_copy")

@expose("rktio_envvars_copy", [W_R_PTR, W_R_PTR], simple=True)
def rktio_envvars_copy(w_rktio, w_envvars):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_envvars = rffi.cast(R_PTR, w_envvars.to_rffi())

	res = c_rktio_envvars_copy(r_rktio, r_envvars)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_envvars_copy),(c_rktio_get_last_error rktio_envvars_copy)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_empty_envvars = rffi.llexternal('rktio_empty_envvars', [R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_empty_envvars")

@expose("rktio_empty_envvars", [W_R_PTR], simple=True)
def rktio_empty_envvars(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_empty_envvars(r_rktio)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_empty_envvars),(c_rktio_get_last_error rktio_empty_envvars)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_envvars = rffi.llexternal('rktio_envvars', [R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_envvars")

@expose("rktio_envvars", [W_R_PTR], simple=True)
def rktio_envvars(w_rktio):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	res = c_rktio_envvars(r_rktio)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_envvars),(c_rktio_get_last_error rktio_envvars)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_setenv = rffi.llexternal('rktio_setenv', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_setenv")

@expose("rktio_setenv", [W_R_PTR, values_string.W_String, values_string.W_String], simple=True)
def rktio_setenv(w_rktio, w_name, w_val):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_name = rffi.str2charp(p_str)

	_p_str = w_val.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_val = rffi.str2charp(p_str)

	res = c_rktio_setenv(r_rktio, r_name, r_val)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_setenv),(c_rktio_get_last_error rktio_setenv)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_getenv = rffi.llexternal('rktio_getenv', [R_PTR, RKTIO_CONST_STRING_T], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_getenv")

@expose("rktio_getenv", [W_R_PTR, values_string.W_String], simple=True)
def rktio_getenv(w_rktio, w_name):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_name.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_name = rffi.str2charp(p_str)

	res = c_rktio_getenv(r_rktio, r_name)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_getenv),(c_rktio_get_last_error rktio_getenv)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_listener_address = rffi.llexternal('rktio_listener_address', [R_PTR, R_PTR], CCHARPP, compilation_info=librktio_a)

rktio_str.append("rktio_listener_address")

@expose("rktio_listener_address", [W_R_PTR, W_R_PTR], simple=True)
def rktio_listener_address(w_rktio, w_lnr):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lnr = rffi.cast(R_PTR, w_lnr.to_rffi())

	res = c_rktio_listener_address(r_rktio, r_lnr)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_listener_address),(c_rktio_get_last_error rktio_listener_address)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARPP
	return values.W_Fixnum(res)


c_rktio_socket_peer_address = rffi.llexternal('rktio_socket_peer_address', [R_PTR, R_PTR], CCHARPP, compilation_info=librktio_a)

rktio_str.append("rktio_socket_peer_address")

@expose("rktio_socket_peer_address", [W_R_PTR, W_R_PTR], simple=True)
def rktio_socket_peer_address(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_socket_peer_address(r_rktio, r_rfd)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_socket_peer_address),(c_rktio_get_last_error rktio_socket_peer_address)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARPP
	return values.W_Fixnum(res)


c_rktio_socket_address = rffi.llexternal('rktio_socket_address', [R_PTR, R_PTR], CCHARPP, compilation_info=librktio_a)

rktio_str.append("rktio_socket_address")

@expose("rktio_socket_address", [W_R_PTR, W_R_PTR], simple=True)
def rktio_socket_address(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_socket_address(r_rktio, r_rfd)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_socket_address),(c_rktio_get_last_error rktio_socket_address)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARPP
	return values.W_Fixnum(res)


c_rktio_udp_change_multicast_group = rffi.llexternal('rktio_udp_change_multicast_group', [R_PTR, R_PTR, R_PTR, R_PTR, INT], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_change_multicast_group")

@expose("rktio_udp_change_multicast_group", [W_R_PTR, W_R_PTR, W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_udp_change_multicast_group(w_rktio, w_rfd, w_group_addr, w_intf_addr, w_action):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_group_addr = rffi.cast(R_PTR, w_group_addr.to_rffi())

	r_intf_addr = rffi.cast(R_PTR, w_intf_addr.to_rffi())

	r_action = rffi.cast(rffi.INT, w_action.value)

	res = c_rktio_udp_change_multicast_group(r_rktio, r_rfd, r_group_addr, r_intf_addr, r_action)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_udp_change_multicast_group),(c_rktio_get_last_error rktio_udp_change_multicast_group)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_udp_set_multicast_interface = rffi.llexternal('rktio_udp_set_multicast_interface', [R_PTR, R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_set_multicast_interface")

@expose("rktio_udp_set_multicast_interface", [W_R_PTR, W_R_PTR, W_R_PTR], simple=True)
def rktio_udp_set_multicast_interface(w_rktio, w_rfd, w_addr):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_addr = rffi.cast(R_PTR, w_addr.to_rffi())

	res = c_rktio_udp_set_multicast_interface(r_rktio, r_rfd, r_addr)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_udp_set_multicast_interface),(c_rktio_get_last_error rktio_udp_set_multicast_interface)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_udp_multicast_interface = rffi.llexternal('rktio_udp_multicast_interface', [R_PTR, R_PTR], CCHARP, compilation_info=librktio_a)

rktio_str.append("rktio_udp_multicast_interface")

@expose("rktio_udp_multicast_interface", [W_R_PTR, W_R_PTR], simple=True)
def rktio_udp_multicast_interface(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_udp_multicast_interface(r_rktio, r_rfd)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_udp_multicast_interface),(c_rktio_get_last_error rktio_udp_multicast_interface)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns CCHARP
	return values.W_Fixnum(res)


c_rktio_udp_set_multicast_ttl = rffi.llexternal('rktio_udp_set_multicast_ttl', [R_PTR, R_PTR, INT], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_set_multicast_ttl")

@expose("rktio_udp_set_multicast_ttl", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_udp_set_multicast_ttl(w_rktio, w_rfd, w_ttl_val):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_ttl_val = rffi.cast(rffi.INT, w_ttl_val.value)

	res = c_rktio_udp_set_multicast_ttl(r_rktio, r_rfd, r_ttl_val)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_udp_set_multicast_ttl),(c_rktio_get_last_error rktio_udp_set_multicast_ttl)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_udp_get_multicast_ttl = rffi.llexternal('rktio_udp_get_multicast_ttl', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_get_multicast_ttl")

@expose("rktio_udp_get_multicast_ttl", [W_R_PTR, W_R_PTR], simple=True)
def rktio_udp_get_multicast_ttl(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_udp_get_multicast_ttl(r_rktio, r_rfd)

	if res == RKTIO_PROP_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_udp_get_multicast_ttl),(c_rktio_get_last_error rktio_udp_get_multicast_ttl)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_udp_set_multicast_loopback = rffi.llexternal('rktio_udp_set_multicast_loopback', [R_PTR, R_PTR, RKTIO_BOOL_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_set_multicast_loopback")

@expose("rktio_udp_set_multicast_loopback", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_udp_set_multicast_loopback(w_rktio, w_rfd, w_on):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_on = rffi.cast(rffi.INT, 1 if w_on is values.w_true else 0)

	res = c_rktio_udp_set_multicast_loopback(r_rktio, r_rfd, r_on)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_udp_set_multicast_loopback),(c_rktio_get_last_error rktio_udp_set_multicast_loopback)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_udp_get_multicast_loopback = rffi.llexternal('rktio_udp_get_multicast_loopback', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_get_multicast_loopback")

@expose("rktio_udp_get_multicast_loopback", [W_R_PTR, W_R_PTR], simple=True)
def rktio_udp_get_multicast_loopback(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_udp_get_multicast_loopback(r_rktio, r_rfd)

	if res == RKTIO_PROP_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_udp_get_multicast_loopback),(c_rktio_get_last_error rktio_udp_get_multicast_loopback)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_udp_get_ttl = rffi.llexternal('rktio_udp_get_ttl', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_get_ttl")

@expose("rktio_udp_get_ttl", [W_R_PTR, W_R_PTR], simple=True)
def rktio_udp_get_ttl(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_udp_get_ttl(r_rktio, r_rfd)

	if res == RKTIO_PROP_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_udp_get_ttl),(c_rktio_get_last_error rktio_udp_get_ttl)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_udp_set_ttl = rffi.llexternal('rktio_udp_set_ttl', [R_PTR, R_PTR, INT], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_set_ttl")

@expose("rktio_udp_set_ttl", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_udp_set_ttl(w_rktio, w_rfd, w_ttl_val):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_ttl_val = rffi.cast(rffi.INT, w_ttl_val.value)

	res = c_rktio_udp_set_ttl(r_rktio, r_rfd, r_ttl_val)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_udp_set_ttl),(c_rktio_get_last_error rktio_udp_set_ttl)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_udp_set_receive_buffer_size = rffi.llexternal('rktio_udp_set_receive_buffer_size', [R_PTR, R_PTR, INT], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_set_receive_buffer_size")

@expose("rktio_udp_set_receive_buffer_size", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_udp_set_receive_buffer_size(w_rktio, w_rfd, w_size):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_size = rffi.cast(rffi.INT, w_size.value)

	res = c_rktio_udp_set_receive_buffer_size(r_rktio, r_rfd, r_size)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_udp_set_receive_buffer_size),(c_rktio_get_last_error rktio_udp_set_receive_buffer_size)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_udp_recvfrom_in = rffi.llexternal('rktio_udp_recvfrom_in', [R_PTR, R_PTR, CCHARP, INTPTR_T, INTPTR_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_udp_recvfrom_in")

@expose("rktio_udp_recvfrom_in", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_udp_recvfrom_in(w_rktio, w_rfd, w_buffer, w_start, w_end):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_buffer = rffi.cast(rffi.CCHARP, w_buffer.value)

	r_start = rffi.cast(rffi.SSIZE_T, w_start.value)

	r_end = rffi.cast(rffi.SSIZE_T, w_end.value)

	res = c_rktio_udp_recvfrom_in(r_rktio, r_rfd, r_buffer, r_start, r_end)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_udp_recvfrom_in),(c_rktio_get_last_error rktio_udp_recvfrom_in)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_udp_recvfrom = rffi.llexternal('rktio_udp_recvfrom', [R_PTR, R_PTR, CCHARP, INTPTR_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_udp_recvfrom")

@expose("rktio_udp_recvfrom", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_udp_recvfrom(w_rktio, w_rfd, w_buffer, w_len):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_buffer = rffi.cast(rffi.CCHARP, w_buffer.value)

	r_len = rffi.cast(rffi.SSIZE_T, w_len.value)

	res = c_rktio_udp_recvfrom(r_rktio, r_rfd, r_buffer, r_len)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_udp_recvfrom),(c_rktio_get_last_error rktio_udp_recvfrom)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_udp_sendto_in = rffi.llexternal('rktio_udp_sendto_in', [R_PTR, R_PTR, R_PTR, CCHARP, INTPTR_T, INTPTR_T], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_sendto_in")

@expose("rktio_udp_sendto_in", [W_R_PTR, W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_udp_sendto_in(w_rktio, w_rfd, w_addr, w_buffer, w_start, w_end):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_addr = rffi.cast(R_PTR, w_addr.to_rffi())

	r_buffer = rffi.cast(rffi.CCHARP, w_buffer.value)

	r_start = rffi.cast(rffi.SSIZE_T, w_start.value)

	r_end = rffi.cast(rffi.SSIZE_T, w_end.value)

	res = c_rktio_udp_sendto_in(r_rktio, r_rfd, r_addr, r_buffer, r_start, r_end)

	if res == RKTIO_WRITE_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_udp_sendto_in),(c_rktio_get_last_error rktio_udp_sendto_in)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_udp_sendto = rffi.llexternal('rktio_udp_sendto', [R_PTR, R_PTR, R_PTR, CCHARP, INTPTR_T], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_sendto")

@expose("rktio_udp_sendto", [W_R_PTR, W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_udp_sendto(w_rktio, w_rfd, w_addr, w_buffer, w_len):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_addr = rffi.cast(R_PTR, w_addr.to_rffi())

	r_buffer = rffi.cast(rffi.CCHARP, w_buffer.value)

	r_len = rffi.cast(rffi.SSIZE_T, w_len.value)

	res = c_rktio_udp_sendto(r_rktio, r_rfd, r_addr, r_buffer, r_len)

	if res == RKTIO_WRITE_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_udp_sendto),(c_rktio_get_last_error rktio_udp_sendto)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_udp_connect = rffi.llexternal('rktio_udp_connect', [R_PTR, R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_connect")

@expose("rktio_udp_connect", [W_R_PTR, W_R_PTR, W_R_PTR], simple=True)
def rktio_udp_connect(w_rktio, w_rfd, w_addr):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_addr = rffi.cast(R_PTR, w_addr.to_rffi())

	res = c_rktio_udp_connect(r_rktio, r_rfd, r_addr)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_udp_connect),(c_rktio_get_last_error rktio_udp_connect)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_udp_bind = rffi.llexternal('rktio_udp_bind', [R_PTR, R_PTR, R_PTR, RKTIO_BOOL_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_bind")

@expose("rktio_udp_bind", [W_R_PTR, W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_udp_bind(w_rktio, w_rfd, w_addr, w_reuse):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_addr = rffi.cast(R_PTR, w_addr.to_rffi())

	r_reuse = rffi.cast(rffi.INT, 1 if w_reuse is values.w_true else 0)

	res = c_rktio_udp_bind(r_rktio, r_rfd, r_addr, r_reuse)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_udp_bind),(c_rktio_get_last_error rktio_udp_bind)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_udp_disconnect = rffi.llexternal('rktio_udp_disconnect', [R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_udp_disconnect")

@expose("rktio_udp_disconnect", [W_R_PTR, W_R_PTR], simple=True)
def rktio_udp_disconnect(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_udp_disconnect(r_rktio, r_rfd)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_udp_disconnect),(c_rktio_get_last_error rktio_udp_disconnect)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_udp_open = rffi.llexternal('rktio_udp_open', [R_PTR, R_PTR, INT], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_udp_open")

@expose("rktio_udp_open", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_udp_open(w_rktio, w_addr, w_family):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_addr = rffi.cast(R_PTR, w_addr.to_rffi())

	r_family = rffi.cast(rffi.INT, w_family.value)

	res = c_rktio_udp_open(r_rktio, r_addr, r_family)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_udp_open),(c_rktio_get_last_error rktio_udp_open)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_tcp_nodelay = rffi.llexternal('rktio_tcp_nodelay', [R_PTR, R_PTR, RKTIO_BOOL_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_tcp_nodelay")

@expose("rktio_tcp_nodelay", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_tcp_nodelay(w_rktio, w_rfd, w_enable):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_enable = rffi.cast(rffi.INT, 1 if w_enable is values.w_true else 0)

	res = c_rktio_tcp_nodelay(r_rktio, r_rfd, r_enable)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_tcp_nodelay),(c_rktio_get_last_error rktio_tcp_nodelay)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_socket_shutdown = rffi.llexternal('rktio_socket_shutdown', [R_PTR, R_PTR, INT], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_socket_shutdown")

@expose("rktio_socket_shutdown", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_socket_shutdown(w_rktio, w_rfd, w_mode):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_mode = rffi.cast(rffi.INT, w_mode.value)

	res = c_rktio_socket_shutdown(r_rktio, r_rfd, r_mode)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_socket_shutdown),(c_rktio_get_last_error rktio_socket_shutdown)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_connect_trying = rffi.llexternal('rktio_connect_trying', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_connect_trying")

@expose("rktio_connect_trying", [W_R_PTR, W_R_PTR], simple=True)
def rktio_connect_trying(w_rktio, w_conn):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_conn = rffi.cast(R_PTR, w_conn.to_rffi())

	res = c_rktio_connect_trying(r_rktio, r_conn)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_connect_trying),(c_rktio_get_last_error rktio_connect_trying)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_poll_connect_ready = rffi.llexternal('rktio_poll_connect_ready', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_poll_connect_ready")

@expose("rktio_poll_connect_ready", [W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_connect_ready(w_rktio, w_conn):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_conn = rffi.cast(R_PTR, w_conn.to_rffi())

	res = c_rktio_poll_connect_ready(r_rktio, r_conn)

	if res == RKTIO_POLL_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_poll_connect_ready),(c_rktio_get_last_error rktio_poll_connect_ready)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_connect_finish = rffi.llexternal('rktio_connect_finish', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_connect_finish")

@expose("rktio_connect_finish", [W_R_PTR, W_R_PTR], simple=True)
def rktio_connect_finish(w_rktio, w_conn):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_conn = rffi.cast(R_PTR, w_conn.to_rffi())

	res = c_rktio_connect_finish(r_rktio, r_conn)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_connect_finish),(c_rktio_get_last_error rktio_connect_finish)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_start_connect = rffi.llexternal('rktio_start_connect', [R_PTR, R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_start_connect")

@expose("rktio_start_connect", [W_R_PTR, W_R_PTR, W_R_PTR], simple=True)
def rktio_start_connect(w_rktio, w_remote, w_local):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_remote = rffi.cast(R_PTR, w_remote.to_rffi())

	r_local = rffi.cast(R_PTR, w_local.to_rffi())

	res = c_rktio_start_connect(r_rktio, r_remote, r_local)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_start_connect),(c_rktio_get_last_error rktio_start_connect)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_accept = rffi.llexternal('rktio_accept', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_accept")

@expose("rktio_accept", [W_R_PTR, W_R_PTR], simple=True)
def rktio_accept(w_rktio, w_listener):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_listener = rffi.cast(R_PTR, w_listener.to_rffi())

	res = c_rktio_accept(r_rktio, r_listener)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_accept),(c_rktio_get_last_error rktio_accept)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_poll_accept_ready = rffi.llexternal('rktio_poll_accept_ready', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_poll_accept_ready")

@expose("rktio_poll_accept_ready", [W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_accept_ready(w_rktio, w_listener):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_listener = rffi.cast(R_PTR, w_listener.to_rffi())

	res = c_rktio_poll_accept_ready(r_rktio, r_listener)

	if res == RKTIO_POLL_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_poll_accept_ready),(c_rktio_get_last_error rktio_poll_accept_ready)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_listen = rffi.llexternal('rktio_listen', [R_PTR, R_PTR, INT, RKTIO_BOOL_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_listen")

@expose("rktio_listen", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_listen(w_rktio, w_local, w_backlog, w_reuse):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_local = rffi.cast(R_PTR, w_local.to_rffi())

	r_backlog = rffi.cast(rffi.INT, w_backlog.value)

	r_reuse = rffi.cast(rffi.INT, 1 if w_reuse is values.w_true else 0)

	res = c_rktio_listen(r_rktio, r_local, r_backlog, r_reuse)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_listen),(c_rktio_get_last_error rktio_listen)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_addrinfo_lookup_get = rffi.llexternal('rktio_addrinfo_lookup_get', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_addrinfo_lookup_get")

@expose("rktio_addrinfo_lookup_get", [W_R_PTR, W_R_PTR], simple=True)
def rktio_addrinfo_lookup_get(w_rktio, w_lookup):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lookup = rffi.cast(R_PTR, w_lookup.to_rffi())

	res = c_rktio_addrinfo_lookup_get(r_rktio, r_lookup)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_addrinfo_lookup_get),(c_rktio_get_last_error rktio_addrinfo_lookup_get)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_poll_addrinfo_lookup_ready = rffi.llexternal('rktio_poll_addrinfo_lookup_ready', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_poll_addrinfo_lookup_ready")

@expose("rktio_poll_addrinfo_lookup_ready", [W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_addrinfo_lookup_ready(w_rktio, w_lookup):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_lookup = rffi.cast(R_PTR, w_lookup.to_rffi())

	res = c_rktio_poll_addrinfo_lookup_ready(r_rktio, r_lookup)

	if res == RKTIO_POLL_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_poll_addrinfo_lookup_ready),(c_rktio_get_last_error rktio_poll_addrinfo_lookup_ready)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_start_addrinfo_lookup = rffi.llexternal('rktio_start_addrinfo_lookup', [R_PTR, RKTIO_CONST_STRING_T, INT, INT, RKTIO_BOOL_T, RKTIO_BOOL_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_start_addrinfo_lookup")

@expose("rktio_start_addrinfo_lookup", [W_R_PTR, values_string.W_String, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_start_addrinfo_lookup(w_rktio, w_hostname, w_portno, w_family, w_passive, w_tcp):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_hostname.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_hostname = rffi.str2charp(p_str)

	r_portno = rffi.cast(rffi.INT, w_portno.value)

	r_family = rffi.cast(rffi.INT, w_family.value)

	r_passive = rffi.cast(rffi.INT, 1 if w_passive is values.w_true else 0)

	r_tcp = rffi.cast(rffi.INT, 1 if w_tcp is values.w_true else 0)

	res = c_rktio_start_addrinfo_lookup(r_rktio, r_hostname, r_portno, r_family, r_passive, r_tcp)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_start_addrinfo_lookup),(c_rktio_get_last_error rktio_start_addrinfo_lookup)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_make_pipe = rffi.llexternal('rktio_make_pipe', [R_PTR, INT], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_make_pipe")

@expose("rktio_make_pipe", [W_R_PTR, values.W_Fixnum], simple=True)
def rktio_make_pipe(w_rktio, w_flags):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_flags = rffi.cast(rffi.INT, w_flags.value)

	res = c_rktio_make_pipe(r_rktio, r_flags)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_make_pipe),(c_rktio_get_last_error rktio_make_pipe)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_set_file_size = rffi.llexternal('rktio_set_file_size', [R_PTR, R_PTR, RKTIO_FILESIZE_T], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_set_file_size")

@expose("rktio_set_file_size", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_set_file_size(w_rktio, w_rfd, w_sz):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_sz = rffi.cast(rffi.INT, w_sz.value)

	res = c_rktio_set_file_size(r_rktio, r_rfd, r_sz)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_set_file_size),(c_rktio_get_last_error rktio_set_file_size)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_get_file_position = rffi.llexternal('rktio_get_file_position', [R_PTR, R_PTR], RKTIO_FILESIZE_T, compilation_info=librktio_a)

rktio_str.append("rktio_get_file_position")

@expose("rktio_get_file_position", [W_R_PTR, W_R_PTR], simple=True)
def rktio_get_file_position(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_get_file_position(r_rktio, r_rfd)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_get_file_position),(c_rktio_get_last_error rktio_get_file_position)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_FILESIZE_T
	return values.W_Fixnum(res)


c_rktio_set_file_position = rffi.llexternal('rktio_set_file_position', [R_PTR, R_PTR, RKTIO_FILESIZE_T, INT], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_set_file_position")

@expose("rktio_set_file_position", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_set_file_position(w_rktio, w_rfd, w_pos, w_whence):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_pos = rffi.cast(rffi.INT, w_pos.value)

	r_whence = rffi.cast(rffi.INT, w_whence.value)

	res = c_rktio_set_file_position(r_rktio, r_rfd, r_pos, r_whence)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_set_file_position),(c_rktio_get_last_error rktio_set_file_position)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_file_unlock = rffi.llexternal('rktio_file_unlock', [R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_file_unlock")

@expose("rktio_file_unlock", [W_R_PTR, W_R_PTR], simple=True)
def rktio_file_unlock(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_file_unlock(r_rktio, r_rfd)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_file_unlock),(c_rktio_get_last_error rktio_file_unlock)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_file_lock_try = rffi.llexternal('rktio_file_lock_try', [R_PTR, R_PTR, RKTIO_BOOL_T], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_file_lock_try")

@expose("rktio_file_lock_try", [W_R_PTR, W_R_PTR, values.W_Fixnum], simple=True)
def rktio_file_lock_try(w_rktio, w_rfd, w_excl):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	r_excl = rffi.cast(rffi.INT, 1 if w_excl is values.w_true else 0)

	res = c_rktio_file_lock_try(r_rktio, r_rfd, r_excl)

	if res == RKTIO_LOCK_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_file_lock_try),(c_rktio_get_last_error rktio_file_lock_try)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_poll_write_flushed = rffi.llexternal('rktio_poll_write_flushed', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_poll_write_flushed")

@expose("rktio_poll_write_flushed", [W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_write_flushed(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_poll_write_flushed(r_rktio, r_rfd)

	if res == RKTIO_POLL_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_poll_write_flushed),(c_rktio_get_last_error rktio_poll_write_flushed)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_poll_write_ready = rffi.llexternal('rktio_poll_write_ready', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_poll_write_ready")

@expose("rktio_poll_write_ready", [W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_write_ready(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_poll_write_ready(r_rktio, r_rfd)

	if res == RKTIO_POLL_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_poll_write_ready),(c_rktio_get_last_error rktio_poll_write_ready)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_poll_read_ready = rffi.llexternal('rktio_poll_read_ready', [R_PTR, R_PTR], RKTIO_TRI_T, compilation_info=librktio_a)

rktio_str.append("rktio_poll_read_ready")

@expose("rktio_poll_read_ready", [W_R_PTR, W_R_PTR], simple=True)
def rktio_poll_read_ready(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_poll_read_ready(r_rktio, r_rfd)

	if res == RKTIO_POLL_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_poll_read_ready),(c_rktio_get_last_error rktio_poll_read_ready)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_TRI_T
	return values.W_Fixnum(res)


c_rktio_read_converted_in = rffi.llexternal('rktio_read_converted_in', [R_PTR, R_PTR, CCHARP, INTPTR_T, INTPTR_T, CCHARP, INTPTR_T], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_read_converted_in")

@expose("rktio_read_converted_in", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_read_converted_in(w_rktio, w_fd, w_buffer, w_start, w_len, w_is_converted, w_converted_start):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	r_buffer = rffi.cast(rffi.CCHARP, w_buffer.value)

	r_start = rffi.cast(rffi.SSIZE_T, w_start.value)

	r_len = rffi.cast(rffi.SSIZE_T, w_len.value)

	r_is_converted = rffi.cast(rffi.CCHARP, w_is_converted.value)

	r_converted_start = rffi.cast(rffi.SSIZE_T, w_converted_start.value)

	res = c_rktio_read_converted_in(r_rktio, r_fd, r_buffer, r_start, r_len, r_is_converted, r_converted_start)

	if res == RKTIO_READ_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_read_converted_in),(c_rktio_get_last_error rktio_read_converted_in)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_write_in = rffi.llexternal('rktio_write_in', [R_PTR, R_PTR, CCHARP, INTPTR_T, INTPTR_T], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_write_in")

@expose("rktio_write_in", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_write_in(w_rktio, w_fd, w_buffer, w_start, w_end):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	r_buffer = rffi.cast(rffi.CCHARP, w_buffer.value)

	r_start = rffi.cast(rffi.SSIZE_T, w_start.value)

	r_end = rffi.cast(rffi.SSIZE_T, w_end.value)

	res = c_rktio_write_in(r_rktio, r_fd, r_buffer, r_start, r_end)

	if res == RKTIO_WRITE_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_write_in),(c_rktio_get_last_error rktio_write_in)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_read_in = rffi.llexternal('rktio_read_in', [R_PTR, R_PTR, CCHARP, INTPTR_T, INTPTR_T], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_read_in")

@expose("rktio_read_in", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_read_in(w_rktio, w_fd, w_buffer, w_start, w_end):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	r_buffer = rffi.cast(rffi.CCHARP, w_buffer.value)

	r_start = rffi.cast(rffi.SSIZE_T, w_start.value)

	r_end = rffi.cast(rffi.SSIZE_T, w_end.value)

	res = c_rktio_read_in(r_rktio, r_fd, r_buffer, r_start, r_end)

	if res == RKTIO_READ_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_read_in),(c_rktio_get_last_error rktio_read_in)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_read_converted = rffi.llexternal('rktio_read_converted', [R_PTR, R_PTR, CCHARP, INTPTR_T, CCHARP], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_read_converted")

@expose("rktio_read_converted", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_read_converted(w_rktio, w_fd, w_buffer, w_len, w_is_converted):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	r_buffer = rffi.cast(rffi.CCHARP, w_buffer.value)

	r_len = rffi.cast(rffi.SSIZE_T, w_len.value)

	r_is_converted = rffi.cast(rffi.CCHARP, w_is_converted.value)

	res = c_rktio_read_converted(r_rktio, r_fd, r_buffer, r_len, r_is_converted)

	if res == RKTIO_READ_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_read_converted),(c_rktio_get_last_error rktio_read_converted)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_write = rffi.llexternal('rktio_write', [R_PTR, R_PTR, CCHARP, INTPTR_T], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_write")

@expose("rktio_write", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_write(w_rktio, w_fd, w_buffer, w_len):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	r_buffer = rffi.cast(rffi.CCHARP, w_buffer.value)

	r_len = rffi.cast(rffi.SSIZE_T, w_len.value)

	res = c_rktio_write(r_rktio, r_fd, r_buffer, r_len)

	if res == RKTIO_WRITE_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_write),(c_rktio_get_last_error rktio_write)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_read = rffi.llexternal('rktio_read', [R_PTR, R_PTR, CCHARP, INTPTR_T], INTPTR_T, compilation_info=librktio_a)

rktio_str.append("rktio_read")

@expose("rktio_read", [W_R_PTR, W_R_PTR, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_read(w_rktio, w_fd, w_buffer, w_len):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	r_buffer = rffi.cast(rffi.CCHARP, w_buffer.value)

	r_len = rffi.cast(rffi.SSIZE_T, w_len.value)

	res = c_rktio_read(r_rktio, r_fd, r_buffer, r_len)

	if res == RKTIO_READ_ERROR:
		elems = [(c_rktio_get_last_error_kind rktio_read),(c_rktio_get_last_error rktio_read)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns INTPTR_T
	return values.W_Fixnum(res)


c_rktio_std_fd = rffi.llexternal('rktio_std_fd', [R_PTR, INT], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_std_fd")

@expose("rktio_std_fd", [W_R_PTR, values.W_Fixnum], simple=True)
def rktio_std_fd(w_rktio, w_which):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_which = rffi.cast(rffi.INT, w_which.value)

	res = c_rktio_std_fd(r_rktio, r_which)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_std_fd),(c_rktio_get_last_error rktio_std_fd)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_dup = rffi.llexternal('rktio_dup', [R_PTR, R_PTR], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_dup")

@expose("rktio_dup", [W_R_PTR, W_R_PTR], simple=True)
def rktio_dup(w_rktio, w_rfd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_rfd = rffi.cast(R_PTR, w_rfd.to_rffi())

	res = c_rktio_dup(r_rktio, r_rfd)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_dup),(c_rktio_get_last_error rktio_dup)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_close = rffi.llexternal('rktio_close', [R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_close")

@expose("rktio_close", [W_R_PTR, W_R_PTR], simple=True)
def rktio_close(w_rktio, w_fd):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fd = rffi.cast(R_PTR, w_fd.to_rffi())

	res = c_rktio_close(r_rktio, r_fd)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_close),(c_rktio_get_last_error rktio_close)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_open_with_create_permissions = rffi.llexternal('rktio_open_with_create_permissions', [R_PTR, RKTIO_CONST_STRING_T, INT, INT], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_open_with_create_permissions")

@expose("rktio_open_with_create_permissions", [W_R_PTR, values_string.W_String, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_open_with_create_permissions(w_rktio, w_src, w_modes, w_perm_bits):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_src.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_src = rffi.str2charp(p_str)

	r_modes = rffi.cast(rffi.INT, w_modes.value)

	r_perm_bits = rffi.cast(rffi.INT, w_perm_bits.value)

	res = c_rktio_open_with_create_permissions(r_rktio, r_src, r_modes, r_perm_bits)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_open_with_create_permissions),(c_rktio_get_last_error rktio_open_with_create_permissions)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_open = rffi.llexternal('rktio_open', [R_PTR, RKTIO_CONST_STRING_T, INT], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_open")

@expose("rktio_open", [W_R_PTR, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_open(w_rktio, w_src, w_modes):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_src.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_src = rffi.str2charp(p_str)

	r_modes = rffi.cast(rffi.INT, w_modes.value)

	res = c_rktio_open(r_rktio, r_src, r_modes)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_open),(c_rktio_get_last_error rktio_open)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_system_fd = rffi.llexternal('rktio_system_fd', [R_PTR, INTPTR_T, INT], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_system_fd")

@expose("rktio_system_fd", [W_R_PTR, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_system_fd(w_rktio, w_system_fd, w_modes):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_system_fd = rffi.cast(rffi.SSIZE_T, w_system_fd.value)

	r_modes = rffi.cast(rffi.INT, w_modes.value)

	res = c_rktio_system_fd(r_rktio, r_system_fd, r_modes)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_system_fd),(c_rktio_get_last_error rktio_system_fd)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_get_dll_path = rffi.llexternal('rktio_get_dll_path', [RKTIO_CHAR16_T], RKTIO_CHAR16_T, compilation_info=librktio_a)

rktio_str.append("rktio_get_dll_path")

@expose("rktio_get_dll_path", [values.W_Fixnum], simple=True)
def rktio_get_dll_path(w_p):

	r_p = rffi.cast(rffi.INT, w_p.value)

	res = c_rktio_get_dll_path(r_p)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_get_dll_path),(c_rktio_get_last_error rktio_get_dll_path)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_CHAR16_T
	return values.W_Fixnum(res)


c_rktio_copy_file_finish_permissions = rffi.llexternal('rktio_copy_file_finish_permissions', [R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_copy_file_finish_permissions")

@expose("rktio_copy_file_finish_permissions", [W_R_PTR, W_R_PTR], simple=True)
def rktio_copy_file_finish_permissions(w_rktio, w_fc):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fc = rffi.cast(R_PTR, w_fc.to_rffi())

	res = c_rktio_copy_file_finish_permissions(r_rktio, r_fc)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_copy_file_finish_permissions),(c_rktio_get_last_error rktio_copy_file_finish_permissions),(c_rktio_get_last_error_step rktio_copy_file_finish_permissions)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_copy_file_step = rffi.llexternal('rktio_copy_file_step', [R_PTR, R_PTR], RKTIO_OK_T, compilation_info=librktio_a)

rktio_str.append("rktio_copy_file_step")

@expose("rktio_copy_file_step", [W_R_PTR, W_R_PTR], simple=True)
def rktio_copy_file_step(w_rktio, w_fc):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	r_fc = rffi.cast(R_PTR, w_fc.to_rffi())

	res = c_rktio_copy_file_step(r_rktio, r_fc)

	if res == #f:
		elems = [(c_rktio_get_last_error_kind rktio_copy_file_step),(c_rktio_get_last_error rktio_copy_file_step),(c_rktio_get_last_error_step rktio_copy_file_step)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns RKTIO_OK_T
	return values.W_Fixnum(res)


c_rktio_copy_file_start_permissions = rffi.llexternal('rktio_copy_file_start_permissions', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T, RKTIO_BOOL_T, RKTIO_BOOL_T, INT, RKTIO_BOOL_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_copy_file_start_permissions")

@expose("rktio_copy_file_start_permissions", [W_R_PTR, values_string.W_String, values_string.W_String, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum, values.W_Fixnum], simple=True)
def rktio_copy_file_start_permissions(w_rktio, w_dest, w_src, w_exists_ok, w_use_perm_bits, w_perm_bits, w_override_create_perms):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_dest.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_dest = rffi.str2charp(p_str)

	_p_str = w_src.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_src = rffi.str2charp(p_str)

	r_exists_ok = rffi.cast(rffi.INT, 1 if w_exists_ok is values.w_true else 0)

	r_use_perm_bits = rffi.cast(rffi.INT, 1 if w_use_perm_bits is values.w_true else 0)

	r_perm_bits = rffi.cast(rffi.INT, w_perm_bits.value)

	r_override_create_perms = rffi.cast(rffi.INT, 1 if w_override_create_perms is values.w_true else 0)

	res = c_rktio_copy_file_start_permissions(r_rktio, r_dest, r_src, r_exists_ok, r_use_perm_bits, r_perm_bits, r_override_create_perms)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_copy_file_start_permissions),(c_rktio_get_last_error rktio_copy_file_start_permissions),(c_rktio_get_last_error_step rktio_copy_file_start_permissions)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


c_rktio_copy_file_start = rffi.llexternal('rktio_copy_file_start', [R_PTR, RKTIO_CONST_STRING_T, RKTIO_CONST_STRING_T, RKTIO_BOOL_T], R_PTR, compilation_info=librktio_a)

rktio_str.append("rktio_copy_file_start")

@expose("rktio_copy_file_start", [W_R_PTR, values_string.W_String, values_string.W_String, values.W_Fixnum], simple=True)
def rktio_copy_file_start(w_rktio, w_dest, w_src, w_exists_ok):

	r_rktio = rffi.cast(R_PTR, w_rktio.to_rffi())

	_p_str = w_dest.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_dest = rffi.str2charp(p_str)

	_p_str = w_src.as_str_utf8()
	p_str = _p_str if _p_str else ""
	r_src = rffi.str2charp(p_str)

	r_exists_ok = rffi.cast(rffi.INT, 1 if w_exists_ok is values.w_true else 0)

	res = c_rktio_copy_file_start(r_rktio, r_dest, r_src, r_exists_ok)

	if res == NULL:
		elems = [(c_rktio_get_last_error_kind rktio_copy_file_start),(c_rktio_get_last_error rktio_copy_file_start),(c_rktio_get_last_error_step rktio_copy_file_start)]
		return values_vector.W_Vector.fromelements([num(n) for n in elems])

	# returns R_PTR
	return W_R_PTR(res)


# Expose #%rktio module

rktio = make_primitive_table(rktio_str)
select_prim_table[sym("#%rktio")] = rktio


