#lang racket/base

(require "simpler-branchy2.rkt")

(define input '(26 12 6 19 23 33 34 30 20 18 25 36 2 0 13 32 13 26 33 28 7 7 8 23 5 5 14 32 15 19 29 30 29 12 18 32 23 12 17 3 19 36 5 35 28 2 31 22 35 12 10 4 7 30 9 22 36 1 27 15 11 30 30 32 36 5 6 4 31 34 16 0 12 21 10 26 15 24 37 19 3 24 24 34 8 11 10 28 15 1 10 36 7 20 37 12 10 31 11 8 11 12 15 31 19 10 20 1 4 10 3 32 35 33 2 19 8 14 12 28 12 36 27 30 24 23 19 9 9 37 36 10 27 14 31 21 22 8 13 14 37 25 26 14 22 33 25 23 37 15 16 24 18 25 8 28 34 34 13 4 32 31 11 23 16 30 14 33 22 21 35 13 10 29 9 17 29 20 27 29 20 0 1 29 28 19 1 25 31 22 19 6 25 33 1 7 30 15 17 33 25 14 23 37 0 30 7 11 12 35 13 36 0 36 29 9 24 2 15 18 22 12 34 14 2 35 29 8 33 28 31 0 8 31 33 34 8 26 31 23 13 13 22 36 8 1 35 6 8 3 15 33 16 5 20 6 11 26 29 10 33 37 22 19 32 22 35 17 22 35 29 37 9 16 20 37 36 33 36 19 8 24 22 20 5 13 5 18 20 7 25 2 20 3 10 29 0 18 16 2 3 25 8 13 32 37 28 6 10 6 9 1 26 22 26 24 33 15 11 1 36 5 36 0 33 31 3 18 4 12 6 27 15 0 31 3 14 36 37 26 14 26 31 4 29 9 27 27 8 19 33 9 19 37 16 34 1 37 28 29 16 23 23 24 1 7 20 23 17 24 2 21 8 35 1 20 30 2 11 18 37 10 31 31 34 29 30 25 2 0 18 31 6 24 14 17 5 29 9 13 31 25 14 14 13 19 19 9 27 7 11 17 14 27 31 32 4 27 35 18 10 9 32 33 5 17 31 26 22 30 7 6 20 19 18 25 37 8 2 12 6 29 19 14 8 31 6 19 28 2 23 7 11 16 2 9 6 30 33 7 33 31 31 10 13 18 2 28 29 19 29 6 6 28 27 14 32 8 21 26 19 18 5 34 6 22 29 27 2 7 8 11 24 23 30 9 16 23 3 2 31 22 19 25 18 8 23 4 9 37 3 34 22 6 22 5 31 32 0 4 1 4 11 37 17 1 19 2 32 22 16 26 29 18 32 34 29 12 35 23 11 23 9 8 12 1 4 24 29 24 31 31 35 16 25 11 21 4 31 18 23 5 35 15 25 0 13 22 11 19 27 21 11 31 4 35 25 18 34 0 30 35 6 33 25 18 17 3 8 15 10 0 19 10 19 18 31 3 34 8 19 24 35 37 3 8 19 32 3 30 10 33 29 27 30 22 3 19 14 16 26 25 18 21 23 23 3 32 0 18 10 18 27 35 22 16 1 32 7 29 2 25 17 24 3 3 6 30 22 23 19 29 19 22 11 0 3 19 12 32 11 30 25 23 15 18 20 27 22 13 0 27 4 36 24 3 21 29 15 28 25 20 17 15 31 25 25 1 25 13 2 33 6 10 3 14 13 6 11 12 35 30 21 0 12 18 22 19 24 30 30 7 15 6 8 37 31 20 9 13 33 36 15 36 5 13 30 21 28 16 30 35 8 32 29 29 24 6 23 17 18 35 3 14 1 33 32 35 5 31 36 26 11 19 20 35 1 35 11 37 13 32 27 10 6 27 16 6 33 31 33 23 37 25 14 20 31 20 37 29 35 19 10 22 19 7 30 31 2 27 10 20 29 27 34 18 27 12 6 0 11 12 24 12 24 26 19 3 21 4 24 6 21 27 8 1 8 22 14 1 4 23 25 32 4 19 15 27 10 3 24 7 26 32 28 7 1 10 9 7 9 32 32 8 19 31 36 12 14 1 20 22 17 31 29 19 28 3 21 21 8 5 3 18 23 2 5 16 30 19 27 5 0 0 27 12 34 25 6 7 32 2 30 24 20 26 15 16 9 10 11 8 20 7 26 28 10 15 37 21 13 13 9 33 1 8 20 14 12 25 6 25 17 33 3 3 1 30 17 12 0 9 18 30 15 1 22 10 20 35 20 1 4 6 7 34 17 26 20 13 13 11 10 4 17 19 13 6 15 37 5 15 2 22 34 3 3 28 25 23 15 12 2 11 18 28 33 27 4 10 12 29 12 5 19 32 15 33 28 31 26 12 37 25 20 7 3 28 2 7 36 4 32 20 35 9 11 29 21 2 6 29 9 33 31 8 34 28 27 29 5 24 9 36 27 30 33 20 26 5 33 8 6 12 14 20 34 27 15 17 15 22 19 23 25 30 16 27 29 22 23 17 20 17 2 3 37 1 17 29 33 9 13 2 21 6 7 36 29 15 34 37 12 9 7 30 11 36 9 9 18 20 1 32 31 26 29 11 14 35 7 1 11 26 9 12 20 13 20 15 18 22 37 37 12 29 23 31 1 25 33 33 6 4 16 26 20 37 26 33 10 12 13 27 35 13 17 11 21 7 22 13 27 31 21 15 5 2 4 12 16 2 17 27 8 30 12 16 10 35 33 30 27 20 2 32 20 34 33 24 8 3 22 11 18 17 4 1 27 11 25 20 0 12 33 19 16 20 30 3 25 35 15 12 6 24 8 0 26 14 29 10 23 3 9 27 25 37 29 10 9 20 37 32 7 9 19 2 34 13 34 0 9 32 13 14 27 31 15 15 18 12 36 0 19 28 14 33 32 2 30 25 7 9 19 3 24 13 30 5 16 24 12 11 14 5 35 9 25 12 13 6 16 35 35 4 27 35 13 15 0 11 23 0 2 35 4 27 33 2 36 6 14 21 13 36 27 37 2 5 27 26 31 17 1 29 27 34 23 22 3 11 31 9 12 17 9 24 3 14 0 35 27 36 34 7 8 31 19 34 14 18 26 1 25 27 36 22 5 2 0 33 26 33 20 2 27 0 20 19 7 4 18 25 30 15 6 33 23 17 33 13 4 9 32 27 20 14 1 4 26 29 8 3 27 33 8 1 25 20 9 34 18 1 7 37 24 19 25 11 22 6 1 8 18 10 35 19 11 27 13 1 32 15 4 7 18 33 26 6 23 26 32 28 25 17 35 25 4 23 12 19 21 16 4 15 4 21 21 20 27 18 24 21 11 7 20 37 25 19 5 8 1 33 15 17 2 15 24 35 10 8 16 9 0 35 22 13 27 34 23 22 29 5 14 32 6 32 11 16 26 10 16 11 28 7 18 18 16 25 20 24 29 4 17 24 12 2 30 34 4 27 30 14 26 8 32 3 4 12 21 4 28 0 31 13 18 28 0 30 28 0 17 1 12 17 2 4 6 10 15 19 33 19 3 5 24 17 26 28 22 1 28 3 1 24 32 25 18 16 3 4 30 24 7 26 18 15 26 16 19 25 28 28 22 18 3 16 5 18 10 1 37 13 30 6 1 24 19 24 4 31 27 31 23 25 8 3 28 4 12 33 0 32 7 12 13 16 34 36 2 7 13 13 37 2 18 26 32 22 1 29 33 8 11 20 37 24 4 24 20 31 25 37 7 8 3 13 32 3 32 22 11 0 34 6 1 36 31 4 9 10 22 24 32 36 24 29 13 8 19 1 30 33 27 21 5 8 4 13 17 9 10 26 8 19 35 6 1 32 13 29 16 24 37 26 13 22 27 16 35 19 32 9 27 21 32 7 28 1 20 34 36 11 19 17 35 25 25 17 29 28 5 6 18 33 12 23 27 30 24 33 10 16 0 6 24 18 30 0 11 19 28 27 19 18 13 7 4 4 19 9 14 29 5 2 36 5 6 8 21 20 2 21 25 17 6 33 3 7 32 17 31 26 2 8 5 22 15 11 22 6 24 30 11 16 26 24 22 10 12 6 18 27 26 11 16 12 32 12 33 36 29 9 14 11 6 19 37 15 16 24 18 10 34 36 18 7 14 21 34 14 13 27 23 4 2 6 5 8 20 32 32 19 4 17 6 29 37 36 11 11 27 11 13 12 2 16 24 10 11 2 32 2 4 6 18 33 21 5 30 26 33 36 37 19 2 35 5 2 23 0 6 9 6 11 7 3 20 5 5 25 19 7 0 37 8 23 12 4 18 4 29 28 32 4 15 23 37 3 13 3 10 36 34 21 14 33 24 1 14 7 0 30 0 14 8 13 17 27 18 20 3 1 37 19 6 13 28 10 30 36 11 0 19 18 17 31 16 29 15 16 23 15 35 8 9 35 7 25 36 8 26 24 36 15 23 20 9 29 9 34 32 17 17 4 27 30 31 26 8 6 22 18 24 30 8 37 24 17 8 27 33 35 6 4 16 14 34 6 1 22 27 7 1 13 31 4 3 16 3 4 17 3 30 13 28 34 14 27 13 14 32 19 18 20 15 17 14 3 2 11 27 3 6 10 26 17 25 32 37 24 35 3 12 6 24 0 22 9 5 28 18 34 19 12 30 1 19 34 20 33 2 2 37 30 14 27 23 28))

(printf "---- LOOP BEGINS ---- result : ~a\n" (function input))
(for ([i (in-range 15)])
  (time (for ([j (in-range 2000)])
          (function input))))
(printf "---- LOOP ENDS ---- \n")